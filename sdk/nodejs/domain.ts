// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Mailgun App resource. This can be used to
 * create and manage applications on Mailgun.
 *
 * After DNS records are set, domain verification should be triggered manually using [PUT /domains/\<domain\>/verify](https://documentation.mailgun.com/en/latest/api-domains.html#domains)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mailgun from "@pulumi/mailgun";
 *
 * // Create a new Mailgun domain
 * const _default = new mailgun.Domain("default", {
 *     name: "test.example.com",
 *     region: "us",
 *     spamAction: "disabled",
 *     smtpPassword: "supersecretpassword1234",
 *     dkimKeySize: 1024,
 * });
 * ```
 *
 * ## Import
 *
 * Domains can be imported using `region:domain_name` via `import` command. Region has to be chosen from `eu` or `us` (when no selection `us` is applied).
 *
 * hcl
 *
 * ```sh
 * $ pulumi import mailgun:index/domain:Domain test us:example.domain.com
 * ```
 */
export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainState, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mailgun:index/domain:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    /**
     * (Enum: `yes` or `no`) The click tracking settings for the domain. Default: `no`
     */
    public readonly clickTracking!: pulumi.Output<boolean | undefined>;
    /**
     * The length of your domain’s generated DKIM key. Default value is `1024`.
     */
    public readonly dkimKeySize!: pulumi.Output<number | undefined>;
    /**
     * The name of your DKIM selector if you want to specify it whereas MailGun will make it's own choice.
     */
    public readonly dkimSelector!: pulumi.Output<string | undefined>;
    /**
     * If set to true, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account. If set to false, the domain will have the same DKIM authority as the root domain registered on the same mailgun account. The default is `false`.
     */
    public readonly forceDkimAuthority!: pulumi.Output<boolean | undefined>;
    /**
     * The domain to add to Mailgun
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (Enum: `yes` or `no`) The open tracking settings for the domain. Default: `no`
     */
    public readonly openTracking!: pulumi.Output<boolean | undefined>;
    /**
     * A list of DNS records for receiving validation.  **Deprecated** Use `receivingRecordsSet` instead.
     *
     * @deprecated Use `receivingRecordsSet` instead.
     */
    public /*out*/ readonly receivingRecords!: pulumi.Output<outputs.DomainReceivingRecord[]>;
    /**
     * A set of DNS records for receiving validation.
     */
    public /*out*/ readonly receivingRecordsSets!: pulumi.Output<outputs.DomainReceivingRecordsSet[]>;
    /**
     * The region where domain will be created. Default value is `us`.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * A list of DNS records for sending validation. **Deprecated** Use `sendingRecordsSet` instead.
     *
     * @deprecated Use `sendingRecordsSet` instead.
     */
    public /*out*/ readonly sendingRecords!: pulumi.Output<outputs.DomainSendingRecord[]>;
    /**
     * A set of DNS records for sending validation.
     */
    public /*out*/ readonly sendingRecordsSets!: pulumi.Output<outputs.DomainSendingRecordsSet[]>;
    /**
     * The login email for the SMTP server.
     */
    public /*out*/ readonly smtpLogin!: pulumi.Output<string>;
    /**
     * Password for SMTP authentication
     */
    public readonly smtpPassword!: pulumi.Output<string | undefined>;
    /**
     * `disabled` or `tag` Disable, no spam
     * filtering will occur for inbound messages. Tag, messages
     * will be tagged with a spam header. Default value is `disabled`.
     */
    public readonly spamAction!: pulumi.Output<string | undefined>;
    /**
     * (`http` or `https`) The tracking web scheme. Default: `http`
     */
    public readonly webScheme!: pulumi.Output<string | undefined>;
    /**
     * Boolean that determines whether
     * the domain will accept email for sub-domains.
     */
    public readonly wildcard!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainArgs | DomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainState | undefined;
            resourceInputs["clickTracking"] = state ? state.clickTracking : undefined;
            resourceInputs["dkimKeySize"] = state ? state.dkimKeySize : undefined;
            resourceInputs["dkimSelector"] = state ? state.dkimSelector : undefined;
            resourceInputs["forceDkimAuthority"] = state ? state.forceDkimAuthority : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openTracking"] = state ? state.openTracking : undefined;
            resourceInputs["receivingRecords"] = state ? state.receivingRecords : undefined;
            resourceInputs["receivingRecordsSets"] = state ? state.receivingRecordsSets : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sendingRecords"] = state ? state.sendingRecords : undefined;
            resourceInputs["sendingRecordsSets"] = state ? state.sendingRecordsSets : undefined;
            resourceInputs["smtpLogin"] = state ? state.smtpLogin : undefined;
            resourceInputs["smtpPassword"] = state ? state.smtpPassword : undefined;
            resourceInputs["spamAction"] = state ? state.spamAction : undefined;
            resourceInputs["webScheme"] = state ? state.webScheme : undefined;
            resourceInputs["wildcard"] = state ? state.wildcard : undefined;
        } else {
            const args = argsOrState as DomainArgs | undefined;
            resourceInputs["clickTracking"] = args ? args.clickTracking : undefined;
            resourceInputs["dkimKeySize"] = args ? args.dkimKeySize : undefined;
            resourceInputs["dkimSelector"] = args ? args.dkimSelector : undefined;
            resourceInputs["forceDkimAuthority"] = args ? args.forceDkimAuthority : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openTracking"] = args ? args.openTracking : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["smtpPassword"] = args?.smtpPassword ? pulumi.secret(args.smtpPassword) : undefined;
            resourceInputs["spamAction"] = args ? args.spamAction : undefined;
            resourceInputs["webScheme"] = args ? args.webScheme : undefined;
            resourceInputs["wildcard"] = args ? args.wildcard : undefined;
            resourceInputs["receivingRecords"] = undefined /*out*/;
            resourceInputs["receivingRecordsSets"] = undefined /*out*/;
            resourceInputs["sendingRecords"] = undefined /*out*/;
            resourceInputs["sendingRecordsSets"] = undefined /*out*/;
            resourceInputs["smtpLogin"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["smtpPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Domain resources.
 */
export interface DomainState {
    /**
     * (Enum: `yes` or `no`) The click tracking settings for the domain. Default: `no`
     */
    clickTracking?: pulumi.Input<boolean>;
    /**
     * The length of your domain’s generated DKIM key. Default value is `1024`.
     */
    dkimKeySize?: pulumi.Input<number>;
    /**
     * The name of your DKIM selector if you want to specify it whereas MailGun will make it's own choice.
     */
    dkimSelector?: pulumi.Input<string>;
    /**
     * If set to true, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account. If set to false, the domain will have the same DKIM authority as the root domain registered on the same mailgun account. The default is `false`.
     */
    forceDkimAuthority?: pulumi.Input<boolean>;
    /**
     * The domain to add to Mailgun
     */
    name?: pulumi.Input<string>;
    /**
     * (Enum: `yes` or `no`) The open tracking settings for the domain. Default: `no`
     */
    openTracking?: pulumi.Input<boolean>;
    /**
     * A list of DNS records for receiving validation.  **Deprecated** Use `receivingRecordsSet` instead.
     *
     * @deprecated Use `receivingRecordsSet` instead.
     */
    receivingRecords?: pulumi.Input<pulumi.Input<inputs.DomainReceivingRecord>[]>;
    /**
     * A set of DNS records for receiving validation.
     */
    receivingRecordsSets?: pulumi.Input<pulumi.Input<inputs.DomainReceivingRecordsSet>[]>;
    /**
     * The region where domain will be created. Default value is `us`.
     */
    region?: pulumi.Input<string>;
    /**
     * A list of DNS records for sending validation. **Deprecated** Use `sendingRecordsSet` instead.
     *
     * @deprecated Use `sendingRecordsSet` instead.
     */
    sendingRecords?: pulumi.Input<pulumi.Input<inputs.DomainSendingRecord>[]>;
    /**
     * A set of DNS records for sending validation.
     */
    sendingRecordsSets?: pulumi.Input<pulumi.Input<inputs.DomainSendingRecordsSet>[]>;
    /**
     * The login email for the SMTP server.
     */
    smtpLogin?: pulumi.Input<string>;
    /**
     * Password for SMTP authentication
     */
    smtpPassword?: pulumi.Input<string>;
    /**
     * `disabled` or `tag` Disable, no spam
     * filtering will occur for inbound messages. Tag, messages
     * will be tagged with a spam header. Default value is `disabled`.
     */
    spamAction?: pulumi.Input<string>;
    /**
     * (`http` or `https`) The tracking web scheme. Default: `http`
     */
    webScheme?: pulumi.Input<string>;
    /**
     * Boolean that determines whether
     * the domain will accept email for sub-domains.
     */
    wildcard?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    /**
     * (Enum: `yes` or `no`) The click tracking settings for the domain. Default: `no`
     */
    clickTracking?: pulumi.Input<boolean>;
    /**
     * The length of your domain’s generated DKIM key. Default value is `1024`.
     */
    dkimKeySize?: pulumi.Input<number>;
    /**
     * The name of your DKIM selector if you want to specify it whereas MailGun will make it's own choice.
     */
    dkimSelector?: pulumi.Input<string>;
    /**
     * If set to true, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account. If set to false, the domain will have the same DKIM authority as the root domain registered on the same mailgun account. The default is `false`.
     */
    forceDkimAuthority?: pulumi.Input<boolean>;
    /**
     * The domain to add to Mailgun
     */
    name?: pulumi.Input<string>;
    /**
     * (Enum: `yes` or `no`) The open tracking settings for the domain. Default: `no`
     */
    openTracking?: pulumi.Input<boolean>;
    /**
     * The region where domain will be created. Default value is `us`.
     */
    region?: pulumi.Input<string>;
    /**
     * Password for SMTP authentication
     */
    smtpPassword?: pulumi.Input<string>;
    /**
     * `disabled` or `tag` Disable, no spam
     * filtering will occur for inbound messages. Tag, messages
     * will be tagged with a spam header. Default value is `disabled`.
     */
    spamAction?: pulumi.Input<string>;
    /**
     * (`http` or `https`) The tracking web scheme. Default: `http`
     */
    webScheme?: pulumi.Input<string>;
    /**
     * Boolean that determines whether
     * the domain will accept email for sub-domains.
     */
    wildcard?: pulumi.Input<boolean>;
}
