// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * `mailgun.Domain` provides details about a Mailgun domain.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as mailgun from "@pulumi/mailgun";
 *
 * const domain = mailgun.getDomain({
 *     name: "test.example.com",
 * });
 * const mailgun_mx = new aws.index.Route53Record("mailgun-mx", {
 *     zoneId: zoneId,
 *     name: domainMailgun.name,
 *     type: "MX",
 *     ttl: 3600,
 *     records: [
 *         `${domain.receivingRecords?.[0]?.priority} ${domain.receivingRecords?.[0]?.value}.`,
 *         `${domain.receivingRecords?.[1]?.priority} ${domain.receivingRecords?.[1]?.value}.`,
 *     ],
 * });
 * ```
 */
export function getDomain(args: GetDomainArgs, opts?: pulumi.InvokeOptions): Promise<GetDomainResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mailgun:index/getDomain:getDomain", {
        "clickTracking": args.clickTracking,
        "dkimKeySize": args.dkimKeySize,
        "dkimSelector": args.dkimSelector,
        "forceDkimAuthority": args.forceDkimAuthority,
        "name": args.name,
        "openTracking": args.openTracking,
        "region": args.region,
        "smtpPassword": args.smtpPassword,
        "spamAction": args.spamAction,
        "webScheme": args.webScheme,
        "wildcard": args.wildcard,
    }, opts);
}

/**
 * A collection of arguments for invoking getDomain.
 */
export interface GetDomainArgs {
    /**
     * The click tracking setting.
     */
    clickTracking?: boolean;
    dkimKeySize?: number;
    dkimSelector?: string;
    forceDkimAuthority?: boolean;
    /**
     * The name of the domain.
     */
    name: string;
    /**
     * The open tracking setting.
     */
    openTracking?: boolean;
    /**
     * The region where domain will be created. Default value is `us`.
     */
    region?: string;
    /**
     * The password to the SMTP server.
     */
    smtpPassword?: string;
    /**
     * The spam filtering setting.
     */
    spamAction?: string;
    /**
     * The tracking web scheme.
     */
    webScheme?: string;
    /**
     * Whether or not the domain will accept email for sub-domains.
     */
    wildcard?: boolean;
}

/**
 * A collection of values returned by getDomain.
 */
export interface GetDomainResult {
    /**
     * The click tracking setting.
     */
    readonly clickTracking?: boolean;
    readonly dkimKeySize?: number;
    readonly dkimSelector?: string;
    readonly forceDkimAuthority?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the record.
     */
    readonly name: string;
    /**
     * The open tracking setting.
     */
    readonly openTracking?: boolean;
    /**
     * A list of DNS records for receiving validation.
     *
     * @deprecated Use `receivingRecordsSet` instead.
     */
    readonly receivingRecords: outputs.GetDomainReceivingRecord[];
    readonly receivingRecordsSets: outputs.GetDomainReceivingRecordsSet[];
    readonly region?: string;
    /**
     * A list of DNS records for sending validation.
     *
     * @deprecated Use `sendingRecordsSet` instead.
     */
    readonly sendingRecords: outputs.GetDomainSendingRecord[];
    readonly sendingRecordsSets: outputs.GetDomainSendingRecordsSet[];
    /**
     * The login email for the SMTP server.
     */
    readonly smtpLogin: string;
    /**
     * The password to the SMTP server.
     */
    readonly smtpPassword?: string;
    /**
     * The spam filtering setting.
     */
    readonly spamAction?: string;
    /**
     * The tracking web scheme.
     */
    readonly webScheme?: string;
    /**
     * Whether or not the domain will accept email for sub-domains.
     */
    readonly wildcard?: boolean;
}
/**
 * `mailgun.Domain` provides details about a Mailgun domain.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as mailgun from "@pulumi/mailgun";
 *
 * const domain = mailgun.getDomain({
 *     name: "test.example.com",
 * });
 * const mailgun_mx = new aws.index.Route53Record("mailgun-mx", {
 *     zoneId: zoneId,
 *     name: domainMailgun.name,
 *     type: "MX",
 *     ttl: 3600,
 *     records: [
 *         `${domain.receivingRecords?.[0]?.priority} ${domain.receivingRecords?.[0]?.value}.`,
 *         `${domain.receivingRecords?.[1]?.priority} ${domain.receivingRecords?.[1]?.value}.`,
 *     ],
 * });
 * ```
 */
export function getDomainOutput(args: GetDomainOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDomainResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mailgun:index/getDomain:getDomain", {
        "clickTracking": args.clickTracking,
        "dkimKeySize": args.dkimKeySize,
        "dkimSelector": args.dkimSelector,
        "forceDkimAuthority": args.forceDkimAuthority,
        "name": args.name,
        "openTracking": args.openTracking,
        "region": args.region,
        "smtpPassword": args.smtpPassword,
        "spamAction": args.spamAction,
        "webScheme": args.webScheme,
        "wildcard": args.wildcard,
    }, opts);
}

/**
 * A collection of arguments for invoking getDomain.
 */
export interface GetDomainOutputArgs {
    /**
     * The click tracking setting.
     */
    clickTracking?: pulumi.Input<boolean>;
    dkimKeySize?: pulumi.Input<number>;
    dkimSelector?: pulumi.Input<string>;
    forceDkimAuthority?: pulumi.Input<boolean>;
    /**
     * The name of the domain.
     */
    name: pulumi.Input<string>;
    /**
     * The open tracking setting.
     */
    openTracking?: pulumi.Input<boolean>;
    /**
     * The region where domain will be created. Default value is `us`.
     */
    region?: pulumi.Input<string>;
    /**
     * The password to the SMTP server.
     */
    smtpPassword?: pulumi.Input<string>;
    /**
     * The spam filtering setting.
     */
    spamAction?: pulumi.Input<string>;
    /**
     * The tracking web scheme.
     */
    webScheme?: pulumi.Input<string>;
    /**
     * Whether or not the domain will accept email for sub-domains.
     */
    wildcard?: pulumi.Input<boolean>;
}
