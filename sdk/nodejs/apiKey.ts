// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mailgun from "@pulumi/mailgun";
 *
 * // Create a new Mailgun API key
 * const someKey = new mailgun.ApiKey("some_key", {
 *     role: "basic",
 *     kind: "user",
 *     description: "Some key",
 * });
 * ```
 */
export class ApiKey extends pulumi.CustomResource {
    /**
     * Get an existing ApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiKeyState, opts?: pulumi.CustomResourceOptions): ApiKey {
        return new ApiKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mailgun:index/apiKey:ApiKey';

    /**
     * Returns true if the given object is an instance of ApiKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiKey.__pulumiType;
    }

    /**
     * Key description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The reason for the key's disablement.
     */
    declare public /*out*/ readonly disabledReason: pulumi.Output<string>;
    /**
     * Web domain to associate with the key, for keys of `domain` kind.
     */
    declare public readonly domainName: pulumi.Output<string | undefined>;
    /**
     * API key user's email address; should be provided for all keys of `web` kind.
     */
    declare public readonly email: pulumi.Output<string | undefined>;
    /**
     * When the key will expire.
     */
    declare public readonly expiresAt: pulumi.Output<number | undefined>;
    /**
     * Whether or not the key is disabled from use.
     */
    declare public /*out*/ readonly isDisabled: pulumi.Output<boolean>;
    /**
     * (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
     */
    declare public readonly kind: pulumi.Output<string | undefined>;
    /**
     * An email address associated with the key.
     */
    declare public /*out*/ readonly requestor: pulumi.Output<string>;
    /**
     * (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
     */
    declare public readonly role: pulumi.Output<string>;
    /**
     * The full API key secret in plain text.
     */
    declare public /*out*/ readonly secret: pulumi.Output<string>;
    /**
     * API key user's string user ID; should be provided for all keys of `web` kind.
     */
    declare public readonly userId: pulumi.Output<string | undefined>;
    /**
     * API key user's name.
     */
    declare public readonly userName: pulumi.Output<string | undefined>;

    /**
     * Create a ApiKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiKeyArgs | ApiKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiKeyState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["disabledReason"] = state?.disabledReason;
            resourceInputs["domainName"] = state?.domainName;
            resourceInputs["email"] = state?.email;
            resourceInputs["expiresAt"] = state?.expiresAt;
            resourceInputs["isDisabled"] = state?.isDisabled;
            resourceInputs["kind"] = state?.kind;
            resourceInputs["requestor"] = state?.requestor;
            resourceInputs["role"] = state?.role;
            resourceInputs["secret"] = state?.secret;
            resourceInputs["userId"] = state?.userId;
            resourceInputs["userName"] = state?.userName;
        } else {
            const args = argsOrState as ApiKeyArgs | undefined;
            if (args?.role === undefined && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["domainName"] = args?.domainName;
            resourceInputs["email"] = args?.email;
            resourceInputs["expiresAt"] = args?.expiresAt;
            resourceInputs["kind"] = args?.kind;
            resourceInputs["role"] = args?.role;
            resourceInputs["userId"] = args?.userId;
            resourceInputs["userName"] = args?.userName;
            resourceInputs["disabledReason"] = undefined /*out*/;
            resourceInputs["isDisabled"] = undefined /*out*/;
            resourceInputs["requestor"] = undefined /*out*/;
            resourceInputs["secret"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApiKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiKey resources.
 */
export interface ApiKeyState {
    /**
     * Key description.
     */
    description?: pulumi.Input<string>;
    /**
     * The reason for the key's disablement.
     */
    disabledReason?: pulumi.Input<string>;
    /**
     * Web domain to associate with the key, for keys of `domain` kind.
     */
    domainName?: pulumi.Input<string>;
    /**
     * API key user's email address; should be provided for all keys of `web` kind.
     */
    email?: pulumi.Input<string>;
    /**
     * When the key will expire.
     */
    expiresAt?: pulumi.Input<number>;
    /**
     * Whether or not the key is disabled from use.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
     */
    kind?: pulumi.Input<string>;
    /**
     * An email address associated with the key.
     */
    requestor?: pulumi.Input<string>;
    /**
     * (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
     */
    role?: pulumi.Input<string>;
    /**
     * The full API key secret in plain text.
     */
    secret?: pulumi.Input<string>;
    /**
     * API key user's string user ID; should be provided for all keys of `web` kind.
     */
    userId?: pulumi.Input<string>;
    /**
     * API key user's name.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiKey resource.
 */
export interface ApiKeyArgs {
    /**
     * Key description.
     */
    description?: pulumi.Input<string>;
    /**
     * Web domain to associate with the key, for keys of `domain` kind.
     */
    domainName?: pulumi.Input<string>;
    /**
     * API key user's email address; should be provided for all keys of `web` kind.
     */
    email?: pulumi.Input<string>;
    /**
     * When the key will expire.
     */
    expiresAt?: pulumi.Input<number>;
    /**
     * (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
     */
    kind?: pulumi.Input<string>;
    /**
     * (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
     */
    role: pulumi.Input<string>;
    /**
     * API key user's string user ID; should be provided for all keys of `web` kind.
     */
    userId?: pulumi.Input<string>;
    /**
     * API key user's name.
     */
    userName?: pulumi.Input<string>;
}
