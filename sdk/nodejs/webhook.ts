// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Mailgun App resource. This can be used to
 * create and manage applications on Mailgun.
 */
export class Webhook extends pulumi.CustomResource {
    /**
     * Get an existing Webhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookState, opts?: pulumi.CustomResourceOptions): Webhook {
        return new Webhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mailgun:index/webhook:Webhook';

    /**
     * Returns true if the given object is an instance of Webhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Webhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Webhook.__pulumiType;
    }

    /**
     * The domain to add to Mailgun
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The kind of webhook. Supported values (`clicked` `complained` `delivered` `opened` `permanentFail`, `temporaryFail` `unsubscribed`)
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * The region where domain will be created. Default value is `us`.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * The urls of webhook
     */
    public readonly urls!: pulumi.Output<string[]>;

    /**
     * Create a Webhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookArgs | WebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["urls"] = state ? state.urls : undefined;
        } else {
            const args = argsOrState as WebhookArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.urls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'urls'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["urls"] = args ? args.urls : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Webhook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Webhook resources.
 */
export interface WebhookState {
    /**
     * The domain to add to Mailgun
     */
    domain?: pulumi.Input<string>;
    /**
     * The kind of webhook. Supported values (`clicked` `complained` `delivered` `opened` `permanentFail`, `temporaryFail` `unsubscribed`)
     */
    kind?: pulumi.Input<string>;
    /**
     * The region where domain will be created. Default value is `us`.
     */
    region?: pulumi.Input<string>;
    /**
     * The urls of webhook
     */
    urls?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Webhook resource.
 */
export interface WebhookArgs {
    /**
     * The domain to add to Mailgun
     */
    domain: pulumi.Input<string>;
    /**
     * The kind of webhook. Supported values (`clicked` `complained` `delivered` `opened` `permanentFail`, `temporaryFail` `unsubscribed`)
     */
    kind: pulumi.Input<string>;
    /**
     * The region where domain will be created. Default value is `us`.
     */
    region?: pulumi.Input<string>;
    /**
     * The urls of webhook
     */
    urls: pulumi.Input<pulumi.Input<string>[]>;
}
