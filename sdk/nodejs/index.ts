// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { DomainCredentialArgs, DomainCredentialState } from "./domainCredential";
export type DomainCredential = import("./domainCredential").DomainCredential;
export const DomainCredential: typeof import("./domainCredential").DomainCredential = null as any;
utilities.lazyLoad(exports, ["DomainCredential"], () => require("./domainCredential"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export * from "./provider";
import { Provider } from "./provider";

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "mailgun:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "mailgun:index/domainCredential:DomainCredential":
                return new DomainCredential(name, <any>undefined, { urn })
            case "mailgun:index/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "mailgun:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("mailgun", "index/domain", _module)
pulumi.runtime.registerResourceModule("mailgun", "index/domainCredential", _module)
pulumi.runtime.registerResourceModule("mailgun", "index/route", _module)
pulumi.runtime.registerResourceModule("mailgun", "index/webhook", _module)
pulumi.runtime.registerResourcePackage("mailgun", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:mailgun") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
