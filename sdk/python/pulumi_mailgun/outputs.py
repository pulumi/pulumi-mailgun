# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'DomainReceivingRecord',
    'DomainSendingRecord',
]

@pulumi.output_type
class DomainReceivingRecord(dict):
    def __init__(__self__, *,
                 priority: Optional[str] = None,
                 record_type: Optional[str] = None,
                 valid: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str priority: The priority of the record.
        :param str record_type: The record type.
        :param str valid: `"valid"` if the record is valid.
        :param str value: The value of the record.
        """
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if valid is not None:
            pulumi.set(__self__, "valid", valid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        The priority of the record.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[str]:
        """
        The record type.
        """
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter
    def valid(self) -> Optional[str]:
        """
        `"valid"` if the record is valid.
        """
        return pulumi.get(self, "valid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the record.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainSendingRecord(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 record_type: Optional[str] = None,
                 valid: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The domain to add to Mailgun
        :param str record_type: The record type.
        :param str valid: `"valid"` if the record is valid.
        :param str value: The value of the record.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if valid is not None:
            pulumi.set(__self__, "valid", valid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The domain to add to Mailgun
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[str]:
        """
        The record type.
        """
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter
    def valid(self) -> Optional[str]:
        """
        `"valid"` if the record is valid.
        """
        return pulumi.get(self, "valid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the record.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


