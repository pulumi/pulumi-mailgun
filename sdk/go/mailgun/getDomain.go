// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mailgun

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mailgun/sdk/v3/go/mailgun/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `Domain` provides details about a Mailgun domain.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/route53"
//	"github.com/pulumi/pulumi-mailgun/sdk/v3/go/mailgun"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			domain, err := mailgun.LookupDomain(ctx, &mailgun.LookupDomainArgs{
//				Name: "test.example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = route53.NewRecord(ctx, "mailgun-mx", &route53.RecordArgs{
//				Name: pulumi.Any(data.Mailgun.Domain.Name),
//				Records: pulumi.StringArray{
//					pulumi.String(fmt.Sprintf("%v %v.", domain.ReceivingRecords[0].Priority, domain.ReceivingRecords[0].Value)),
//					pulumi.String(fmt.Sprintf("%v %v.", domain.ReceivingRecords[1].Priority, domain.ReceivingRecords[1].Value)),
//				},
//				Ttl:    pulumi.Int(3600),
//				Type:   pulumi.String("MX"),
//				ZoneId: pulumi.Any(_var.Zone_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDomain(ctx *pulumi.Context, args *LookupDomainArgs, opts ...pulumi.InvokeOption) (*LookupDomainResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDomainResult
	err := ctx.Invoke("mailgun:index/getDomain:getDomain", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomain.
type LookupDomainArgs struct {
	DkimKeySize        *int    `pulumi:"dkimKeySize"`
	DkimSelector       *string `pulumi:"dkimSelector"`
	ForceDkimAuthority *bool   `pulumi:"forceDkimAuthority"`
	// The name of the domain.
	Name         string `pulumi:"name"`
	OpenTracking *bool  `pulumi:"openTracking"`
	// The region where domain will be created. Default value is `us`.
	Region *string `pulumi:"region"`
	// The password to the SMTP server.
	SmtpPassword *string `pulumi:"smtpPassword"`
	// The spam filtering setting.
	SpamAction *string `pulumi:"spamAction"`
	// Whether or not the domain will accept email for sub-domains.
	Wildcard *bool `pulumi:"wildcard"`
}

// A collection of values returned by getDomain.
type LookupDomainResult struct {
	DkimKeySize        *int    `pulumi:"dkimKeySize"`
	DkimSelector       *string `pulumi:"dkimSelector"`
	ForceDkimAuthority *bool   `pulumi:"forceDkimAuthority"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the record.
	Name         string `pulumi:"name"`
	OpenTracking *bool  `pulumi:"openTracking"`
	// A list of DNS records for receiving validation.
	//
	// Deprecated: Use `receiving_records_set` instead.
	ReceivingRecords     []GetDomainReceivingRecord     `pulumi:"receivingRecords"`
	ReceivingRecordsSets []GetDomainReceivingRecordsSet `pulumi:"receivingRecordsSets"`
	Region               *string                        `pulumi:"region"`
	// A list of DNS records for sending validation.
	//
	// Deprecated: Use `sending_records_set` instead.
	SendingRecords     []GetDomainSendingRecord     `pulumi:"sendingRecords"`
	SendingRecordsSets []GetDomainSendingRecordsSet `pulumi:"sendingRecordsSets"`
	// The login email for the SMTP server.
	SmtpLogin string `pulumi:"smtpLogin"`
	// The password to the SMTP server.
	SmtpPassword *string `pulumi:"smtpPassword"`
	// The spam filtering setting.
	SpamAction *string `pulumi:"spamAction"`
	// Whether or not the domain will accept email for sub-domains.
	Wildcard *bool `pulumi:"wildcard"`
}

func LookupDomainOutput(ctx *pulumi.Context, args LookupDomainOutputArgs, opts ...pulumi.InvokeOption) LookupDomainResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDomainResult, error) {
			args := v.(LookupDomainArgs)
			r, err := LookupDomain(ctx, &args, opts...)
			var s LookupDomainResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDomainResultOutput)
}

// A collection of arguments for invoking getDomain.
type LookupDomainOutputArgs struct {
	DkimKeySize        pulumi.IntPtrInput    `pulumi:"dkimKeySize"`
	DkimSelector       pulumi.StringPtrInput `pulumi:"dkimSelector"`
	ForceDkimAuthority pulumi.BoolPtrInput   `pulumi:"forceDkimAuthority"`
	// The name of the domain.
	Name         pulumi.StringInput  `pulumi:"name"`
	OpenTracking pulumi.BoolPtrInput `pulumi:"openTracking"`
	// The region where domain will be created. Default value is `us`.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The password to the SMTP server.
	SmtpPassword pulumi.StringPtrInput `pulumi:"smtpPassword"`
	// The spam filtering setting.
	SpamAction pulumi.StringPtrInput `pulumi:"spamAction"`
	// Whether or not the domain will accept email for sub-domains.
	Wildcard pulumi.BoolPtrInput `pulumi:"wildcard"`
}

func (LookupDomainOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainArgs)(nil)).Elem()
}

// A collection of values returned by getDomain.
type LookupDomainResultOutput struct{ *pulumi.OutputState }

func (LookupDomainResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainResult)(nil)).Elem()
}

func (o LookupDomainResultOutput) ToLookupDomainResultOutput() LookupDomainResultOutput {
	return o
}

func (o LookupDomainResultOutput) ToLookupDomainResultOutputWithContext(ctx context.Context) LookupDomainResultOutput {
	return o
}

func (o LookupDomainResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupDomainResult] {
	return pulumix.Output[LookupDomainResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDomainResultOutput) DkimKeySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupDomainResult) *int { return v.DkimKeySize }).(pulumi.IntPtrOutput)
}

func (o LookupDomainResultOutput) DkimSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainResult) *string { return v.DkimSelector }).(pulumi.StringPtrOutput)
}

func (o LookupDomainResultOutput) ForceDkimAuthority() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupDomainResult) *bool { return v.ForceDkimAuthority }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDomainResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the record.
func (o LookupDomainResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDomainResultOutput) OpenTracking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupDomainResult) *bool { return v.OpenTracking }).(pulumi.BoolPtrOutput)
}

// A list of DNS records for receiving validation.
//
// Deprecated: Use `receiving_records_set` instead.
func (o LookupDomainResultOutput) ReceivingRecords() GetDomainReceivingRecordArrayOutput {
	return o.ApplyT(func(v LookupDomainResult) []GetDomainReceivingRecord { return v.ReceivingRecords }).(GetDomainReceivingRecordArrayOutput)
}

func (o LookupDomainResultOutput) ReceivingRecordsSets() GetDomainReceivingRecordsSetArrayOutput {
	return o.ApplyT(func(v LookupDomainResult) []GetDomainReceivingRecordsSet { return v.ReceivingRecordsSets }).(GetDomainReceivingRecordsSetArrayOutput)
}

func (o LookupDomainResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// A list of DNS records for sending validation.
//
// Deprecated: Use `sending_records_set` instead.
func (o LookupDomainResultOutput) SendingRecords() GetDomainSendingRecordArrayOutput {
	return o.ApplyT(func(v LookupDomainResult) []GetDomainSendingRecord { return v.SendingRecords }).(GetDomainSendingRecordArrayOutput)
}

func (o LookupDomainResultOutput) SendingRecordsSets() GetDomainSendingRecordsSetArrayOutput {
	return o.ApplyT(func(v LookupDomainResult) []GetDomainSendingRecordsSet { return v.SendingRecordsSets }).(GetDomainSendingRecordsSetArrayOutput)
}

// The login email for the SMTP server.
func (o LookupDomainResultOutput) SmtpLogin() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.SmtpLogin }).(pulumi.StringOutput)
}

// The password to the SMTP server.
func (o LookupDomainResultOutput) SmtpPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainResult) *string { return v.SmtpPassword }).(pulumi.StringPtrOutput)
}

// The spam filtering setting.
func (o LookupDomainResultOutput) SpamAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainResult) *string { return v.SpamAction }).(pulumi.StringPtrOutput)
}

// Whether or not the domain will accept email for sub-domains.
func (o LookupDomainResultOutput) Wildcard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupDomainResult) *bool { return v.Wildcard }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDomainResultOutput{})
}
