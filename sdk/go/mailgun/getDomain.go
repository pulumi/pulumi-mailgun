// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mailgun

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `Domain` provides details about a Mailgun domain.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/route53"
// 	"github.com/pulumi/pulumi-mailgun/sdk/v3/go/mailgun"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		domain, err := mailgun.LookupDomain(ctx, &mailgun.LookupDomainArgs{
// 			Name: "test.example.com",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = route53.NewRecord(ctx, "mailgun_mx", &route53.RecordArgs{
// 			Name: pulumi.Any(data.Mailgun.Domain.Name),
// 			Records: pulumi.StringArray{
// 				pulumi.String(fmt.Sprintf("%v%v%v%v", domain.ReceivingRecords[0].Priority, " ", domain.ReceivingRecords[0].Value, ".")),
// 				pulumi.String(fmt.Sprintf("%v%v%v%v", domain.ReceivingRecords[1].Priority, " ", domain.ReceivingRecords[1].Value, ".")),
// 			},
// 			Ttl:    pulumi.Int(3600),
// 			Type:   pulumi.String("MX"),
// 			ZoneId: pulumi.Any(_var.Zone_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupDomain(ctx *pulumi.Context, args *LookupDomainArgs, opts ...pulumi.InvokeOption) (*LookupDomainResult, error) {
	var rv LookupDomainResult
	err := ctx.Invoke("mailgun:index/getDomain:getDomain", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomain.
type LookupDomainArgs struct {
	DkimKeySize  *int    `pulumi:"dkimKeySize"`
	DkimSelector *string `pulumi:"dkimSelector"`
	// The name of the domain.
	Name   string  `pulumi:"name"`
	Region *string `pulumi:"region"`
	// The password to the SMTP server.
	SmtpPassword *string `pulumi:"smtpPassword"`
	// The spam filtering setting.
	SpamAction *string `pulumi:"spamAction"`
	// Whether or not the domain will accept email for sub-domains.
	Wildcard *bool `pulumi:"wildcard"`
}

// A collection of values returned by getDomain.
type LookupDomainResult struct {
	DkimKeySize  *int    `pulumi:"dkimKeySize"`
	DkimSelector *string `pulumi:"dkimSelector"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the record.
	Name string `pulumi:"name"`
	// A list of DNS records for receiving validation.
	ReceivingRecords []GetDomainReceivingRecord `pulumi:"receivingRecords"`
	Region           *string                    `pulumi:"region"`
	// A list of DNS records for sending validation.
	SendingRecords []GetDomainSendingRecord `pulumi:"sendingRecords"`
	// The login email for the SMTP server.
	SmtpLogin string `pulumi:"smtpLogin"`
	// The password to the SMTP server.
	SmtpPassword string `pulumi:"smtpPassword"`
	// The spam filtering setting.
	SpamAction *string `pulumi:"spamAction"`
	// Whether or not the domain will accept email for sub-domains.
	Wildcard *bool `pulumi:"wildcard"`
}
