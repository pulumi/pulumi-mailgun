// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mailgun

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Mailgun App resource. This can be used to
// create and manage applications on Mailgun.
// 
// After DNS records are set, domain verification should be triggered manually using [PUT /domains/\<domain\>/verify](https://documentation.mailgun.com/en/latest/api-domains.html#domains)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-mailgun/blob/master/website/docs/r/domain.html.markdown.
type Domain struct {
	s *pulumi.ResourceState
}

// NewDomain registers a new resource with the given unique name, arguments, and options.
func NewDomain(ctx *pulumi.Context,
	name string, args *DomainArgs, opts ...pulumi.ResourceOpt) (*Domain, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["region"] = nil
		inputs["spamAction"] = nil
		inputs["wildcard"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["region"] = args.Region
		inputs["spamAction"] = args.SpamAction
		inputs["wildcard"] = args.Wildcard
	}
	inputs["receivingRecords"] = nil
	inputs["sendingRecords"] = nil
	inputs["smtpLogin"] = nil
	inputs["smtpPassword"] = nil
	s, err := ctx.RegisterResource("mailgun:index/domain:Domain", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Domain{s: s}, nil
}

// GetDomain gets an existing Domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomain(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DomainState, opts ...pulumi.ResourceOpt) (*Domain, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["name"] = state.Name
		inputs["receivingRecords"] = state.ReceivingRecords
		inputs["region"] = state.Region
		inputs["sendingRecords"] = state.SendingRecords
		inputs["smtpLogin"] = state.SmtpLogin
		inputs["smtpPassword"] = state.SmtpPassword
		inputs["spamAction"] = state.SpamAction
		inputs["wildcard"] = state.Wildcard
	}
	s, err := ctx.ReadResource("mailgun:index/domain:Domain", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Domain{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Domain) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Domain) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The domain to add to Mailgun
func (r *Domain) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// A list of DNS records for receiving validation.
func (r *Domain) ReceivingRecords() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["receivingRecords"])
}

// The region where domain will be created. Default value is `us`.
func (r *Domain) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// A list of DNS records for sending validation.
func (r *Domain) SendingRecords() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["sendingRecords"])
}

// The login email for the SMTP server.
func (r *Domain) SmtpLogin() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["smtpLogin"])
}

// The password to the SMTP server.
func (r *Domain) SmtpPassword() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["smtpPassword"])
}

// `disabled` or `tag` Disable, no spam
// filtering will occur for inbound messages. Tag, messages
// will be tagged with a spam header.
func (r *Domain) SpamAction() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["spamAction"])
}

// Boolean that determines whether
// the domain will accept email for sub-domains.
func (r *Domain) Wildcard() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["wildcard"])
}

// Input properties used for looking up and filtering Domain resources.
type DomainState struct {
	// The domain to add to Mailgun
	Name interface{}
	// A list of DNS records for receiving validation.
	ReceivingRecords interface{}
	// The region where domain will be created. Default value is `us`.
	Region interface{}
	// A list of DNS records for sending validation.
	SendingRecords interface{}
	// The login email for the SMTP server.
	SmtpLogin interface{}
	// The password to the SMTP server.
	SmtpPassword interface{}
	// `disabled` or `tag` Disable, no spam
	// filtering will occur for inbound messages. Tag, messages
	// will be tagged with a spam header.
	SpamAction interface{}
	// Boolean that determines whether
	// the domain will accept email for sub-domains.
	Wildcard interface{}
}

// The set of arguments for constructing a Domain resource.
type DomainArgs struct {
	// The domain to add to Mailgun
	Name interface{}
	// The region where domain will be created. Default value is `us`.
	Region interface{}
	// `disabled` or `tag` Disable, no spam
	// filtering will occur for inbound messages. Tag, messages
	// will be tagged with a spam header.
	SpamAction interface{}
	// Boolean that determines whether
	// the domain will accept email for sub-domains.
	Wildcard interface{}
}
