// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mailgun

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mailgun/sdk/v3/go/mailgun/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DomainReceivingRecord struct {
	Id *string `pulumi:"id"`
	// The priority of the record.
	Priority *string `pulumi:"priority"`
	// The record type.
	RecordType *string `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid *string `pulumi:"valid"`
	// The value of the record.
	Value *string `pulumi:"value"`
}

// DomainReceivingRecordInput is an input type that accepts DomainReceivingRecordArgs and DomainReceivingRecordOutput values.
// You can construct a concrete instance of `DomainReceivingRecordInput` via:
//
//	DomainReceivingRecordArgs{...}
type DomainReceivingRecordInput interface {
	pulumi.Input

	ToDomainReceivingRecordOutput() DomainReceivingRecordOutput
	ToDomainReceivingRecordOutputWithContext(context.Context) DomainReceivingRecordOutput
}

type DomainReceivingRecordArgs struct {
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The priority of the record.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// The record type.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid pulumi.StringPtrInput `pulumi:"valid"`
	// The value of the record.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DomainReceivingRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainReceivingRecord)(nil)).Elem()
}

func (i DomainReceivingRecordArgs) ToDomainReceivingRecordOutput() DomainReceivingRecordOutput {
	return i.ToDomainReceivingRecordOutputWithContext(context.Background())
}

func (i DomainReceivingRecordArgs) ToDomainReceivingRecordOutputWithContext(ctx context.Context) DomainReceivingRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainReceivingRecordOutput)
}

// DomainReceivingRecordArrayInput is an input type that accepts DomainReceivingRecordArray and DomainReceivingRecordArrayOutput values.
// You can construct a concrete instance of `DomainReceivingRecordArrayInput` via:
//
//	DomainReceivingRecordArray{ DomainReceivingRecordArgs{...} }
type DomainReceivingRecordArrayInput interface {
	pulumi.Input

	ToDomainReceivingRecordArrayOutput() DomainReceivingRecordArrayOutput
	ToDomainReceivingRecordArrayOutputWithContext(context.Context) DomainReceivingRecordArrayOutput
}

type DomainReceivingRecordArray []DomainReceivingRecordInput

func (DomainReceivingRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainReceivingRecord)(nil)).Elem()
}

func (i DomainReceivingRecordArray) ToDomainReceivingRecordArrayOutput() DomainReceivingRecordArrayOutput {
	return i.ToDomainReceivingRecordArrayOutputWithContext(context.Background())
}

func (i DomainReceivingRecordArray) ToDomainReceivingRecordArrayOutputWithContext(ctx context.Context) DomainReceivingRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainReceivingRecordArrayOutput)
}

type DomainReceivingRecordOutput struct{ *pulumi.OutputState }

func (DomainReceivingRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainReceivingRecord)(nil)).Elem()
}

func (o DomainReceivingRecordOutput) ToDomainReceivingRecordOutput() DomainReceivingRecordOutput {
	return o
}

func (o DomainReceivingRecordOutput) ToDomainReceivingRecordOutputWithContext(ctx context.Context) DomainReceivingRecordOutput {
	return o
}

func (o DomainReceivingRecordOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecord) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The priority of the record.
func (o DomainReceivingRecordOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecord) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// The record type.
func (o DomainReceivingRecordOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecord) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

// `"valid"` if the record is valid.
func (o DomainReceivingRecordOutput) Valid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecord) *string { return v.Valid }).(pulumi.StringPtrOutput)
}

// The value of the record.
func (o DomainReceivingRecordOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecord) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DomainReceivingRecordArrayOutput struct{ *pulumi.OutputState }

func (DomainReceivingRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainReceivingRecord)(nil)).Elem()
}

func (o DomainReceivingRecordArrayOutput) ToDomainReceivingRecordArrayOutput() DomainReceivingRecordArrayOutput {
	return o
}

func (o DomainReceivingRecordArrayOutput) ToDomainReceivingRecordArrayOutputWithContext(ctx context.Context) DomainReceivingRecordArrayOutput {
	return o
}

func (o DomainReceivingRecordArrayOutput) Index(i pulumi.IntInput) DomainReceivingRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainReceivingRecord {
		return vs[0].([]DomainReceivingRecord)[vs[1].(int)]
	}).(DomainReceivingRecordOutput)
}

type DomainReceivingRecordsSet struct {
	Id *string `pulumi:"id"`
	// The priority of the record.
	Priority *string `pulumi:"priority"`
	// The record type.
	RecordType *string `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid *string `pulumi:"valid"`
	// The value of the record.
	Value *string `pulumi:"value"`
}

// DomainReceivingRecordsSetInput is an input type that accepts DomainReceivingRecordsSetArgs and DomainReceivingRecordsSetOutput values.
// You can construct a concrete instance of `DomainReceivingRecordsSetInput` via:
//
//	DomainReceivingRecordsSetArgs{...}
type DomainReceivingRecordsSetInput interface {
	pulumi.Input

	ToDomainReceivingRecordsSetOutput() DomainReceivingRecordsSetOutput
	ToDomainReceivingRecordsSetOutputWithContext(context.Context) DomainReceivingRecordsSetOutput
}

type DomainReceivingRecordsSetArgs struct {
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The priority of the record.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// The record type.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid pulumi.StringPtrInput `pulumi:"valid"`
	// The value of the record.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DomainReceivingRecordsSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainReceivingRecordsSet)(nil)).Elem()
}

func (i DomainReceivingRecordsSetArgs) ToDomainReceivingRecordsSetOutput() DomainReceivingRecordsSetOutput {
	return i.ToDomainReceivingRecordsSetOutputWithContext(context.Background())
}

func (i DomainReceivingRecordsSetArgs) ToDomainReceivingRecordsSetOutputWithContext(ctx context.Context) DomainReceivingRecordsSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainReceivingRecordsSetOutput)
}

// DomainReceivingRecordsSetArrayInput is an input type that accepts DomainReceivingRecordsSetArray and DomainReceivingRecordsSetArrayOutput values.
// You can construct a concrete instance of `DomainReceivingRecordsSetArrayInput` via:
//
//	DomainReceivingRecordsSetArray{ DomainReceivingRecordsSetArgs{...} }
type DomainReceivingRecordsSetArrayInput interface {
	pulumi.Input

	ToDomainReceivingRecordsSetArrayOutput() DomainReceivingRecordsSetArrayOutput
	ToDomainReceivingRecordsSetArrayOutputWithContext(context.Context) DomainReceivingRecordsSetArrayOutput
}

type DomainReceivingRecordsSetArray []DomainReceivingRecordsSetInput

func (DomainReceivingRecordsSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainReceivingRecordsSet)(nil)).Elem()
}

func (i DomainReceivingRecordsSetArray) ToDomainReceivingRecordsSetArrayOutput() DomainReceivingRecordsSetArrayOutput {
	return i.ToDomainReceivingRecordsSetArrayOutputWithContext(context.Background())
}

func (i DomainReceivingRecordsSetArray) ToDomainReceivingRecordsSetArrayOutputWithContext(ctx context.Context) DomainReceivingRecordsSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainReceivingRecordsSetArrayOutput)
}

type DomainReceivingRecordsSetOutput struct{ *pulumi.OutputState }

func (DomainReceivingRecordsSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainReceivingRecordsSet)(nil)).Elem()
}

func (o DomainReceivingRecordsSetOutput) ToDomainReceivingRecordsSetOutput() DomainReceivingRecordsSetOutput {
	return o
}

func (o DomainReceivingRecordsSetOutput) ToDomainReceivingRecordsSetOutputWithContext(ctx context.Context) DomainReceivingRecordsSetOutput {
	return o
}

func (o DomainReceivingRecordsSetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecordsSet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The priority of the record.
func (o DomainReceivingRecordsSetOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecordsSet) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// The record type.
func (o DomainReceivingRecordsSetOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecordsSet) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

// `"valid"` if the record is valid.
func (o DomainReceivingRecordsSetOutput) Valid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecordsSet) *string { return v.Valid }).(pulumi.StringPtrOutput)
}

// The value of the record.
func (o DomainReceivingRecordsSetOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecordsSet) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DomainReceivingRecordsSetArrayOutput struct{ *pulumi.OutputState }

func (DomainReceivingRecordsSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainReceivingRecordsSet)(nil)).Elem()
}

func (o DomainReceivingRecordsSetArrayOutput) ToDomainReceivingRecordsSetArrayOutput() DomainReceivingRecordsSetArrayOutput {
	return o
}

func (o DomainReceivingRecordsSetArrayOutput) ToDomainReceivingRecordsSetArrayOutputWithContext(ctx context.Context) DomainReceivingRecordsSetArrayOutput {
	return o
}

func (o DomainReceivingRecordsSetArrayOutput) Index(i pulumi.IntInput) DomainReceivingRecordsSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainReceivingRecordsSet {
		return vs[0].([]DomainReceivingRecordsSet)[vs[1].(int)]
	}).(DomainReceivingRecordsSetOutput)
}

type DomainSendingRecord struct {
	Id *string `pulumi:"id"`
	// The domain to add to Mailgun
	Name *string `pulumi:"name"`
	// The record type.
	RecordType *string `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid *string `pulumi:"valid"`
	// The value of the record.
	Value *string `pulumi:"value"`
}

// DomainSendingRecordInput is an input type that accepts DomainSendingRecordArgs and DomainSendingRecordOutput values.
// You can construct a concrete instance of `DomainSendingRecordInput` via:
//
//	DomainSendingRecordArgs{...}
type DomainSendingRecordInput interface {
	pulumi.Input

	ToDomainSendingRecordOutput() DomainSendingRecordOutput
	ToDomainSendingRecordOutputWithContext(context.Context) DomainSendingRecordOutput
}

type DomainSendingRecordArgs struct {
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The domain to add to Mailgun
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The record type.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid pulumi.StringPtrInput `pulumi:"valid"`
	// The value of the record.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DomainSendingRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSendingRecord)(nil)).Elem()
}

func (i DomainSendingRecordArgs) ToDomainSendingRecordOutput() DomainSendingRecordOutput {
	return i.ToDomainSendingRecordOutputWithContext(context.Background())
}

func (i DomainSendingRecordArgs) ToDomainSendingRecordOutputWithContext(ctx context.Context) DomainSendingRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSendingRecordOutput)
}

// DomainSendingRecordArrayInput is an input type that accepts DomainSendingRecordArray and DomainSendingRecordArrayOutput values.
// You can construct a concrete instance of `DomainSendingRecordArrayInput` via:
//
//	DomainSendingRecordArray{ DomainSendingRecordArgs{...} }
type DomainSendingRecordArrayInput interface {
	pulumi.Input

	ToDomainSendingRecordArrayOutput() DomainSendingRecordArrayOutput
	ToDomainSendingRecordArrayOutputWithContext(context.Context) DomainSendingRecordArrayOutput
}

type DomainSendingRecordArray []DomainSendingRecordInput

func (DomainSendingRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainSendingRecord)(nil)).Elem()
}

func (i DomainSendingRecordArray) ToDomainSendingRecordArrayOutput() DomainSendingRecordArrayOutput {
	return i.ToDomainSendingRecordArrayOutputWithContext(context.Background())
}

func (i DomainSendingRecordArray) ToDomainSendingRecordArrayOutputWithContext(ctx context.Context) DomainSendingRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSendingRecordArrayOutput)
}

type DomainSendingRecordOutput struct{ *pulumi.OutputState }

func (DomainSendingRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSendingRecord)(nil)).Elem()
}

func (o DomainSendingRecordOutput) ToDomainSendingRecordOutput() DomainSendingRecordOutput {
	return o
}

func (o DomainSendingRecordOutput) ToDomainSendingRecordOutputWithContext(ctx context.Context) DomainSendingRecordOutput {
	return o
}

func (o DomainSendingRecordOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecord) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The domain to add to Mailgun
func (o DomainSendingRecordOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecord) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The record type.
func (o DomainSendingRecordOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecord) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

// `"valid"` if the record is valid.
func (o DomainSendingRecordOutput) Valid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecord) *string { return v.Valid }).(pulumi.StringPtrOutput)
}

// The value of the record.
func (o DomainSendingRecordOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecord) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DomainSendingRecordArrayOutput struct{ *pulumi.OutputState }

func (DomainSendingRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainSendingRecord)(nil)).Elem()
}

func (o DomainSendingRecordArrayOutput) ToDomainSendingRecordArrayOutput() DomainSendingRecordArrayOutput {
	return o
}

func (o DomainSendingRecordArrayOutput) ToDomainSendingRecordArrayOutputWithContext(ctx context.Context) DomainSendingRecordArrayOutput {
	return o
}

func (o DomainSendingRecordArrayOutput) Index(i pulumi.IntInput) DomainSendingRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainSendingRecord {
		return vs[0].([]DomainSendingRecord)[vs[1].(int)]
	}).(DomainSendingRecordOutput)
}

type DomainSendingRecordsSet struct {
	Id *string `pulumi:"id"`
	// The domain to add to Mailgun
	Name *string `pulumi:"name"`
	// The record type.
	RecordType *string `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid *string `pulumi:"valid"`
	// The value of the record.
	Value *string `pulumi:"value"`
}

// DomainSendingRecordsSetInput is an input type that accepts DomainSendingRecordsSetArgs and DomainSendingRecordsSetOutput values.
// You can construct a concrete instance of `DomainSendingRecordsSetInput` via:
//
//	DomainSendingRecordsSetArgs{...}
type DomainSendingRecordsSetInput interface {
	pulumi.Input

	ToDomainSendingRecordsSetOutput() DomainSendingRecordsSetOutput
	ToDomainSendingRecordsSetOutputWithContext(context.Context) DomainSendingRecordsSetOutput
}

type DomainSendingRecordsSetArgs struct {
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The domain to add to Mailgun
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The record type.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid pulumi.StringPtrInput `pulumi:"valid"`
	// The value of the record.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DomainSendingRecordsSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSendingRecordsSet)(nil)).Elem()
}

func (i DomainSendingRecordsSetArgs) ToDomainSendingRecordsSetOutput() DomainSendingRecordsSetOutput {
	return i.ToDomainSendingRecordsSetOutputWithContext(context.Background())
}

func (i DomainSendingRecordsSetArgs) ToDomainSendingRecordsSetOutputWithContext(ctx context.Context) DomainSendingRecordsSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSendingRecordsSetOutput)
}

// DomainSendingRecordsSetArrayInput is an input type that accepts DomainSendingRecordsSetArray and DomainSendingRecordsSetArrayOutput values.
// You can construct a concrete instance of `DomainSendingRecordsSetArrayInput` via:
//
//	DomainSendingRecordsSetArray{ DomainSendingRecordsSetArgs{...} }
type DomainSendingRecordsSetArrayInput interface {
	pulumi.Input

	ToDomainSendingRecordsSetArrayOutput() DomainSendingRecordsSetArrayOutput
	ToDomainSendingRecordsSetArrayOutputWithContext(context.Context) DomainSendingRecordsSetArrayOutput
}

type DomainSendingRecordsSetArray []DomainSendingRecordsSetInput

func (DomainSendingRecordsSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainSendingRecordsSet)(nil)).Elem()
}

func (i DomainSendingRecordsSetArray) ToDomainSendingRecordsSetArrayOutput() DomainSendingRecordsSetArrayOutput {
	return i.ToDomainSendingRecordsSetArrayOutputWithContext(context.Background())
}

func (i DomainSendingRecordsSetArray) ToDomainSendingRecordsSetArrayOutputWithContext(ctx context.Context) DomainSendingRecordsSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSendingRecordsSetArrayOutput)
}

type DomainSendingRecordsSetOutput struct{ *pulumi.OutputState }

func (DomainSendingRecordsSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSendingRecordsSet)(nil)).Elem()
}

func (o DomainSendingRecordsSetOutput) ToDomainSendingRecordsSetOutput() DomainSendingRecordsSetOutput {
	return o
}

func (o DomainSendingRecordsSetOutput) ToDomainSendingRecordsSetOutputWithContext(ctx context.Context) DomainSendingRecordsSetOutput {
	return o
}

func (o DomainSendingRecordsSetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecordsSet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The domain to add to Mailgun
func (o DomainSendingRecordsSetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecordsSet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The record type.
func (o DomainSendingRecordsSetOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecordsSet) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

// `"valid"` if the record is valid.
func (o DomainSendingRecordsSetOutput) Valid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecordsSet) *string { return v.Valid }).(pulumi.StringPtrOutput)
}

// The value of the record.
func (o DomainSendingRecordsSetOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecordsSet) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DomainSendingRecordsSetArrayOutput struct{ *pulumi.OutputState }

func (DomainSendingRecordsSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainSendingRecordsSet)(nil)).Elem()
}

func (o DomainSendingRecordsSetArrayOutput) ToDomainSendingRecordsSetArrayOutput() DomainSendingRecordsSetArrayOutput {
	return o
}

func (o DomainSendingRecordsSetArrayOutput) ToDomainSendingRecordsSetArrayOutputWithContext(ctx context.Context) DomainSendingRecordsSetArrayOutput {
	return o
}

func (o DomainSendingRecordsSetArrayOutput) Index(i pulumi.IntInput) DomainSendingRecordsSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainSendingRecordsSet {
		return vs[0].([]DomainSendingRecordsSet)[vs[1].(int)]
	}).(DomainSendingRecordsSetOutput)
}

type GetDomainReceivingRecord struct {
	Id string `pulumi:"id"`
	// The priority of the record.
	Priority string `pulumi:"priority"`
	// The record type.
	RecordType string `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid string `pulumi:"valid"`
	// The value of the record.
	Value string `pulumi:"value"`
}

// GetDomainReceivingRecordInput is an input type that accepts GetDomainReceivingRecordArgs and GetDomainReceivingRecordOutput values.
// You can construct a concrete instance of `GetDomainReceivingRecordInput` via:
//
//	GetDomainReceivingRecordArgs{...}
type GetDomainReceivingRecordInput interface {
	pulumi.Input

	ToGetDomainReceivingRecordOutput() GetDomainReceivingRecordOutput
	ToGetDomainReceivingRecordOutputWithContext(context.Context) GetDomainReceivingRecordOutput
}

type GetDomainReceivingRecordArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
	// The priority of the record.
	Priority pulumi.StringInput `pulumi:"priority"`
	// The record type.
	RecordType pulumi.StringInput `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid pulumi.StringInput `pulumi:"valid"`
	// The value of the record.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetDomainReceivingRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainReceivingRecord)(nil)).Elem()
}

func (i GetDomainReceivingRecordArgs) ToGetDomainReceivingRecordOutput() GetDomainReceivingRecordOutput {
	return i.ToGetDomainReceivingRecordOutputWithContext(context.Background())
}

func (i GetDomainReceivingRecordArgs) ToGetDomainReceivingRecordOutputWithContext(ctx context.Context) GetDomainReceivingRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainReceivingRecordOutput)
}

// GetDomainReceivingRecordArrayInput is an input type that accepts GetDomainReceivingRecordArray and GetDomainReceivingRecordArrayOutput values.
// You can construct a concrete instance of `GetDomainReceivingRecordArrayInput` via:
//
//	GetDomainReceivingRecordArray{ GetDomainReceivingRecordArgs{...} }
type GetDomainReceivingRecordArrayInput interface {
	pulumi.Input

	ToGetDomainReceivingRecordArrayOutput() GetDomainReceivingRecordArrayOutput
	ToGetDomainReceivingRecordArrayOutputWithContext(context.Context) GetDomainReceivingRecordArrayOutput
}

type GetDomainReceivingRecordArray []GetDomainReceivingRecordInput

func (GetDomainReceivingRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainReceivingRecord)(nil)).Elem()
}

func (i GetDomainReceivingRecordArray) ToGetDomainReceivingRecordArrayOutput() GetDomainReceivingRecordArrayOutput {
	return i.ToGetDomainReceivingRecordArrayOutputWithContext(context.Background())
}

func (i GetDomainReceivingRecordArray) ToGetDomainReceivingRecordArrayOutputWithContext(ctx context.Context) GetDomainReceivingRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainReceivingRecordArrayOutput)
}

type GetDomainReceivingRecordOutput struct{ *pulumi.OutputState }

func (GetDomainReceivingRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainReceivingRecord)(nil)).Elem()
}

func (o GetDomainReceivingRecordOutput) ToGetDomainReceivingRecordOutput() GetDomainReceivingRecordOutput {
	return o
}

func (o GetDomainReceivingRecordOutput) ToGetDomainReceivingRecordOutputWithContext(ctx context.Context) GetDomainReceivingRecordOutput {
	return o
}

func (o GetDomainReceivingRecordOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainReceivingRecord) string { return v.Id }).(pulumi.StringOutput)
}

// The priority of the record.
func (o GetDomainReceivingRecordOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainReceivingRecord) string { return v.Priority }).(pulumi.StringOutput)
}

// The record type.
func (o GetDomainReceivingRecordOutput) RecordType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainReceivingRecord) string { return v.RecordType }).(pulumi.StringOutput)
}

// `"valid"` if the record is valid.
func (o GetDomainReceivingRecordOutput) Valid() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainReceivingRecord) string { return v.Valid }).(pulumi.StringOutput)
}

// The value of the record.
func (o GetDomainReceivingRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainReceivingRecord) string { return v.Value }).(pulumi.StringOutput)
}

type GetDomainReceivingRecordArrayOutput struct{ *pulumi.OutputState }

func (GetDomainReceivingRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainReceivingRecord)(nil)).Elem()
}

func (o GetDomainReceivingRecordArrayOutput) ToGetDomainReceivingRecordArrayOutput() GetDomainReceivingRecordArrayOutput {
	return o
}

func (o GetDomainReceivingRecordArrayOutput) ToGetDomainReceivingRecordArrayOutputWithContext(ctx context.Context) GetDomainReceivingRecordArrayOutput {
	return o
}

func (o GetDomainReceivingRecordArrayOutput) Index(i pulumi.IntInput) GetDomainReceivingRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainReceivingRecord {
		return vs[0].([]GetDomainReceivingRecord)[vs[1].(int)]
	}).(GetDomainReceivingRecordOutput)
}

type GetDomainReceivingRecordsSet struct {
	Id string `pulumi:"id"`
	// The priority of the record.
	Priority string `pulumi:"priority"`
	// The record type.
	RecordType string `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid string `pulumi:"valid"`
	// The value of the record.
	Value string `pulumi:"value"`
}

// GetDomainReceivingRecordsSetInput is an input type that accepts GetDomainReceivingRecordsSetArgs and GetDomainReceivingRecordsSetOutput values.
// You can construct a concrete instance of `GetDomainReceivingRecordsSetInput` via:
//
//	GetDomainReceivingRecordsSetArgs{...}
type GetDomainReceivingRecordsSetInput interface {
	pulumi.Input

	ToGetDomainReceivingRecordsSetOutput() GetDomainReceivingRecordsSetOutput
	ToGetDomainReceivingRecordsSetOutputWithContext(context.Context) GetDomainReceivingRecordsSetOutput
}

type GetDomainReceivingRecordsSetArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
	// The priority of the record.
	Priority pulumi.StringInput `pulumi:"priority"`
	// The record type.
	RecordType pulumi.StringInput `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid pulumi.StringInput `pulumi:"valid"`
	// The value of the record.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetDomainReceivingRecordsSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainReceivingRecordsSet)(nil)).Elem()
}

func (i GetDomainReceivingRecordsSetArgs) ToGetDomainReceivingRecordsSetOutput() GetDomainReceivingRecordsSetOutput {
	return i.ToGetDomainReceivingRecordsSetOutputWithContext(context.Background())
}

func (i GetDomainReceivingRecordsSetArgs) ToGetDomainReceivingRecordsSetOutputWithContext(ctx context.Context) GetDomainReceivingRecordsSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainReceivingRecordsSetOutput)
}

// GetDomainReceivingRecordsSetArrayInput is an input type that accepts GetDomainReceivingRecordsSetArray and GetDomainReceivingRecordsSetArrayOutput values.
// You can construct a concrete instance of `GetDomainReceivingRecordsSetArrayInput` via:
//
//	GetDomainReceivingRecordsSetArray{ GetDomainReceivingRecordsSetArgs{...} }
type GetDomainReceivingRecordsSetArrayInput interface {
	pulumi.Input

	ToGetDomainReceivingRecordsSetArrayOutput() GetDomainReceivingRecordsSetArrayOutput
	ToGetDomainReceivingRecordsSetArrayOutputWithContext(context.Context) GetDomainReceivingRecordsSetArrayOutput
}

type GetDomainReceivingRecordsSetArray []GetDomainReceivingRecordsSetInput

func (GetDomainReceivingRecordsSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainReceivingRecordsSet)(nil)).Elem()
}

func (i GetDomainReceivingRecordsSetArray) ToGetDomainReceivingRecordsSetArrayOutput() GetDomainReceivingRecordsSetArrayOutput {
	return i.ToGetDomainReceivingRecordsSetArrayOutputWithContext(context.Background())
}

func (i GetDomainReceivingRecordsSetArray) ToGetDomainReceivingRecordsSetArrayOutputWithContext(ctx context.Context) GetDomainReceivingRecordsSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainReceivingRecordsSetArrayOutput)
}

type GetDomainReceivingRecordsSetOutput struct{ *pulumi.OutputState }

func (GetDomainReceivingRecordsSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainReceivingRecordsSet)(nil)).Elem()
}

func (o GetDomainReceivingRecordsSetOutput) ToGetDomainReceivingRecordsSetOutput() GetDomainReceivingRecordsSetOutput {
	return o
}

func (o GetDomainReceivingRecordsSetOutput) ToGetDomainReceivingRecordsSetOutputWithContext(ctx context.Context) GetDomainReceivingRecordsSetOutput {
	return o
}

func (o GetDomainReceivingRecordsSetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainReceivingRecordsSet) string { return v.Id }).(pulumi.StringOutput)
}

// The priority of the record.
func (o GetDomainReceivingRecordsSetOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainReceivingRecordsSet) string { return v.Priority }).(pulumi.StringOutput)
}

// The record type.
func (o GetDomainReceivingRecordsSetOutput) RecordType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainReceivingRecordsSet) string { return v.RecordType }).(pulumi.StringOutput)
}

// `"valid"` if the record is valid.
func (o GetDomainReceivingRecordsSetOutput) Valid() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainReceivingRecordsSet) string { return v.Valid }).(pulumi.StringOutput)
}

// The value of the record.
func (o GetDomainReceivingRecordsSetOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainReceivingRecordsSet) string { return v.Value }).(pulumi.StringOutput)
}

type GetDomainReceivingRecordsSetArrayOutput struct{ *pulumi.OutputState }

func (GetDomainReceivingRecordsSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainReceivingRecordsSet)(nil)).Elem()
}

func (o GetDomainReceivingRecordsSetArrayOutput) ToGetDomainReceivingRecordsSetArrayOutput() GetDomainReceivingRecordsSetArrayOutput {
	return o
}

func (o GetDomainReceivingRecordsSetArrayOutput) ToGetDomainReceivingRecordsSetArrayOutputWithContext(ctx context.Context) GetDomainReceivingRecordsSetArrayOutput {
	return o
}

func (o GetDomainReceivingRecordsSetArrayOutput) Index(i pulumi.IntInput) GetDomainReceivingRecordsSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainReceivingRecordsSet {
		return vs[0].([]GetDomainReceivingRecordsSet)[vs[1].(int)]
	}).(GetDomainReceivingRecordsSetOutput)
}

type GetDomainSendingRecord struct {
	Id string `pulumi:"id"`
	// The name of the domain.
	Name string `pulumi:"name"`
	// The record type.
	RecordType string `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid string `pulumi:"valid"`
	// The value of the record.
	Value string `pulumi:"value"`
}

// GetDomainSendingRecordInput is an input type that accepts GetDomainSendingRecordArgs and GetDomainSendingRecordOutput values.
// You can construct a concrete instance of `GetDomainSendingRecordInput` via:
//
//	GetDomainSendingRecordArgs{...}
type GetDomainSendingRecordInput interface {
	pulumi.Input

	ToGetDomainSendingRecordOutput() GetDomainSendingRecordOutput
	ToGetDomainSendingRecordOutputWithContext(context.Context) GetDomainSendingRecordOutput
}

type GetDomainSendingRecordArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the domain.
	Name pulumi.StringInput `pulumi:"name"`
	// The record type.
	RecordType pulumi.StringInput `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid pulumi.StringInput `pulumi:"valid"`
	// The value of the record.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetDomainSendingRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainSendingRecord)(nil)).Elem()
}

func (i GetDomainSendingRecordArgs) ToGetDomainSendingRecordOutput() GetDomainSendingRecordOutput {
	return i.ToGetDomainSendingRecordOutputWithContext(context.Background())
}

func (i GetDomainSendingRecordArgs) ToGetDomainSendingRecordOutputWithContext(ctx context.Context) GetDomainSendingRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainSendingRecordOutput)
}

// GetDomainSendingRecordArrayInput is an input type that accepts GetDomainSendingRecordArray and GetDomainSendingRecordArrayOutput values.
// You can construct a concrete instance of `GetDomainSendingRecordArrayInput` via:
//
//	GetDomainSendingRecordArray{ GetDomainSendingRecordArgs{...} }
type GetDomainSendingRecordArrayInput interface {
	pulumi.Input

	ToGetDomainSendingRecordArrayOutput() GetDomainSendingRecordArrayOutput
	ToGetDomainSendingRecordArrayOutputWithContext(context.Context) GetDomainSendingRecordArrayOutput
}

type GetDomainSendingRecordArray []GetDomainSendingRecordInput

func (GetDomainSendingRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainSendingRecord)(nil)).Elem()
}

func (i GetDomainSendingRecordArray) ToGetDomainSendingRecordArrayOutput() GetDomainSendingRecordArrayOutput {
	return i.ToGetDomainSendingRecordArrayOutputWithContext(context.Background())
}

func (i GetDomainSendingRecordArray) ToGetDomainSendingRecordArrayOutputWithContext(ctx context.Context) GetDomainSendingRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainSendingRecordArrayOutput)
}

type GetDomainSendingRecordOutput struct{ *pulumi.OutputState }

func (GetDomainSendingRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainSendingRecord)(nil)).Elem()
}

func (o GetDomainSendingRecordOutput) ToGetDomainSendingRecordOutput() GetDomainSendingRecordOutput {
	return o
}

func (o GetDomainSendingRecordOutput) ToGetDomainSendingRecordOutputWithContext(ctx context.Context) GetDomainSendingRecordOutput {
	return o
}

func (o GetDomainSendingRecordOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainSendingRecord) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the domain.
func (o GetDomainSendingRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainSendingRecord) string { return v.Name }).(pulumi.StringOutput)
}

// The record type.
func (o GetDomainSendingRecordOutput) RecordType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainSendingRecord) string { return v.RecordType }).(pulumi.StringOutput)
}

// `"valid"` if the record is valid.
func (o GetDomainSendingRecordOutput) Valid() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainSendingRecord) string { return v.Valid }).(pulumi.StringOutput)
}

// The value of the record.
func (o GetDomainSendingRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainSendingRecord) string { return v.Value }).(pulumi.StringOutput)
}

type GetDomainSendingRecordArrayOutput struct{ *pulumi.OutputState }

func (GetDomainSendingRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainSendingRecord)(nil)).Elem()
}

func (o GetDomainSendingRecordArrayOutput) ToGetDomainSendingRecordArrayOutput() GetDomainSendingRecordArrayOutput {
	return o
}

func (o GetDomainSendingRecordArrayOutput) ToGetDomainSendingRecordArrayOutputWithContext(ctx context.Context) GetDomainSendingRecordArrayOutput {
	return o
}

func (o GetDomainSendingRecordArrayOutput) Index(i pulumi.IntInput) GetDomainSendingRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainSendingRecord {
		return vs[0].([]GetDomainSendingRecord)[vs[1].(int)]
	}).(GetDomainSendingRecordOutput)
}

type GetDomainSendingRecordsSet struct {
	Id string `pulumi:"id"`
	// The name of the domain.
	Name string `pulumi:"name"`
	// The record type.
	RecordType string `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid string `pulumi:"valid"`
	// The value of the record.
	Value string `pulumi:"value"`
}

// GetDomainSendingRecordsSetInput is an input type that accepts GetDomainSendingRecordsSetArgs and GetDomainSendingRecordsSetOutput values.
// You can construct a concrete instance of `GetDomainSendingRecordsSetInput` via:
//
//	GetDomainSendingRecordsSetArgs{...}
type GetDomainSendingRecordsSetInput interface {
	pulumi.Input

	ToGetDomainSendingRecordsSetOutput() GetDomainSendingRecordsSetOutput
	ToGetDomainSendingRecordsSetOutputWithContext(context.Context) GetDomainSendingRecordsSetOutput
}

type GetDomainSendingRecordsSetArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the domain.
	Name pulumi.StringInput `pulumi:"name"`
	// The record type.
	RecordType pulumi.StringInput `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid pulumi.StringInput `pulumi:"valid"`
	// The value of the record.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetDomainSendingRecordsSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainSendingRecordsSet)(nil)).Elem()
}

func (i GetDomainSendingRecordsSetArgs) ToGetDomainSendingRecordsSetOutput() GetDomainSendingRecordsSetOutput {
	return i.ToGetDomainSendingRecordsSetOutputWithContext(context.Background())
}

func (i GetDomainSendingRecordsSetArgs) ToGetDomainSendingRecordsSetOutputWithContext(ctx context.Context) GetDomainSendingRecordsSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainSendingRecordsSetOutput)
}

// GetDomainSendingRecordsSetArrayInput is an input type that accepts GetDomainSendingRecordsSetArray and GetDomainSendingRecordsSetArrayOutput values.
// You can construct a concrete instance of `GetDomainSendingRecordsSetArrayInput` via:
//
//	GetDomainSendingRecordsSetArray{ GetDomainSendingRecordsSetArgs{...} }
type GetDomainSendingRecordsSetArrayInput interface {
	pulumi.Input

	ToGetDomainSendingRecordsSetArrayOutput() GetDomainSendingRecordsSetArrayOutput
	ToGetDomainSendingRecordsSetArrayOutputWithContext(context.Context) GetDomainSendingRecordsSetArrayOutput
}

type GetDomainSendingRecordsSetArray []GetDomainSendingRecordsSetInput

func (GetDomainSendingRecordsSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainSendingRecordsSet)(nil)).Elem()
}

func (i GetDomainSendingRecordsSetArray) ToGetDomainSendingRecordsSetArrayOutput() GetDomainSendingRecordsSetArrayOutput {
	return i.ToGetDomainSendingRecordsSetArrayOutputWithContext(context.Background())
}

func (i GetDomainSendingRecordsSetArray) ToGetDomainSendingRecordsSetArrayOutputWithContext(ctx context.Context) GetDomainSendingRecordsSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainSendingRecordsSetArrayOutput)
}

type GetDomainSendingRecordsSetOutput struct{ *pulumi.OutputState }

func (GetDomainSendingRecordsSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainSendingRecordsSet)(nil)).Elem()
}

func (o GetDomainSendingRecordsSetOutput) ToGetDomainSendingRecordsSetOutput() GetDomainSendingRecordsSetOutput {
	return o
}

func (o GetDomainSendingRecordsSetOutput) ToGetDomainSendingRecordsSetOutputWithContext(ctx context.Context) GetDomainSendingRecordsSetOutput {
	return o
}

func (o GetDomainSendingRecordsSetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainSendingRecordsSet) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the domain.
func (o GetDomainSendingRecordsSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainSendingRecordsSet) string { return v.Name }).(pulumi.StringOutput)
}

// The record type.
func (o GetDomainSendingRecordsSetOutput) RecordType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainSendingRecordsSet) string { return v.RecordType }).(pulumi.StringOutput)
}

// `"valid"` if the record is valid.
func (o GetDomainSendingRecordsSetOutput) Valid() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainSendingRecordsSet) string { return v.Valid }).(pulumi.StringOutput)
}

// The value of the record.
func (o GetDomainSendingRecordsSetOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainSendingRecordsSet) string { return v.Value }).(pulumi.StringOutput)
}

type GetDomainSendingRecordsSetArrayOutput struct{ *pulumi.OutputState }

func (GetDomainSendingRecordsSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainSendingRecordsSet)(nil)).Elem()
}

func (o GetDomainSendingRecordsSetArrayOutput) ToGetDomainSendingRecordsSetArrayOutput() GetDomainSendingRecordsSetArrayOutput {
	return o
}

func (o GetDomainSendingRecordsSetArrayOutput) ToGetDomainSendingRecordsSetArrayOutputWithContext(ctx context.Context) GetDomainSendingRecordsSetArrayOutput {
	return o
}

func (o GetDomainSendingRecordsSetArrayOutput) Index(i pulumi.IntInput) GetDomainSendingRecordsSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainSendingRecordsSet {
		return vs[0].([]GetDomainSendingRecordsSet)[vs[1].(int)]
	}).(GetDomainSendingRecordsSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainReceivingRecordInput)(nil)).Elem(), DomainReceivingRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainReceivingRecordArrayInput)(nil)).Elem(), DomainReceivingRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainReceivingRecordsSetInput)(nil)).Elem(), DomainReceivingRecordsSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainReceivingRecordsSetArrayInput)(nil)).Elem(), DomainReceivingRecordsSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainSendingRecordInput)(nil)).Elem(), DomainSendingRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainSendingRecordArrayInput)(nil)).Elem(), DomainSendingRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainSendingRecordsSetInput)(nil)).Elem(), DomainSendingRecordsSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainSendingRecordsSetArrayInput)(nil)).Elem(), DomainSendingRecordsSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainReceivingRecordInput)(nil)).Elem(), GetDomainReceivingRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainReceivingRecordArrayInput)(nil)).Elem(), GetDomainReceivingRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainReceivingRecordsSetInput)(nil)).Elem(), GetDomainReceivingRecordsSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainReceivingRecordsSetArrayInput)(nil)).Elem(), GetDomainReceivingRecordsSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainSendingRecordInput)(nil)).Elem(), GetDomainSendingRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainSendingRecordArrayInput)(nil)).Elem(), GetDomainSendingRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainSendingRecordsSetInput)(nil)).Elem(), GetDomainSendingRecordsSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainSendingRecordsSetArrayInput)(nil)).Elem(), GetDomainSendingRecordsSetArray{})
	pulumi.RegisterOutputType(DomainReceivingRecordOutput{})
	pulumi.RegisterOutputType(DomainReceivingRecordArrayOutput{})
	pulumi.RegisterOutputType(DomainReceivingRecordsSetOutput{})
	pulumi.RegisterOutputType(DomainReceivingRecordsSetArrayOutput{})
	pulumi.RegisterOutputType(DomainSendingRecordOutput{})
	pulumi.RegisterOutputType(DomainSendingRecordArrayOutput{})
	pulumi.RegisterOutputType(DomainSendingRecordsSetOutput{})
	pulumi.RegisterOutputType(DomainSendingRecordsSetArrayOutput{})
	pulumi.RegisterOutputType(GetDomainReceivingRecordOutput{})
	pulumi.RegisterOutputType(GetDomainReceivingRecordArrayOutput{})
	pulumi.RegisterOutputType(GetDomainReceivingRecordsSetOutput{})
	pulumi.RegisterOutputType(GetDomainReceivingRecordsSetArrayOutput{})
	pulumi.RegisterOutputType(GetDomainSendingRecordOutput{})
	pulumi.RegisterOutputType(GetDomainSendingRecordArrayOutput{})
	pulumi.RegisterOutputType(GetDomainSendingRecordsSetOutput{})
	pulumi.RegisterOutputType(GetDomainSendingRecordsSetArrayOutput{})
}
