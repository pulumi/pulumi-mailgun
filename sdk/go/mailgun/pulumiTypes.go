// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mailgun

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type DomainReceivingRecord struct {
	// The priority of the record.
	Priority *string `pulumi:"priority"`
	// The record type.
	RecordType *string `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid *string `pulumi:"valid"`
	// The value of the record.
	Value *string `pulumi:"value"`
}

// DomainReceivingRecordInput is an input type that accepts DomainReceivingRecordArgs and DomainReceivingRecordOutput values.
// You can construct a concrete instance of `DomainReceivingRecordInput` via:
//
//          DomainReceivingRecordArgs{...}
type DomainReceivingRecordInput interface {
	pulumi.Input

	ToDomainReceivingRecordOutput() DomainReceivingRecordOutput
	ToDomainReceivingRecordOutputWithContext(context.Context) DomainReceivingRecordOutput
}

type DomainReceivingRecordArgs struct {
	// The priority of the record.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// The record type.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid pulumi.StringPtrInput `pulumi:"valid"`
	// The value of the record.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DomainReceivingRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainReceivingRecord)(nil)).Elem()
}

func (i DomainReceivingRecordArgs) ToDomainReceivingRecordOutput() DomainReceivingRecordOutput {
	return i.ToDomainReceivingRecordOutputWithContext(context.Background())
}

func (i DomainReceivingRecordArgs) ToDomainReceivingRecordOutputWithContext(ctx context.Context) DomainReceivingRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainReceivingRecordOutput)
}

// DomainReceivingRecordArrayInput is an input type that accepts DomainReceivingRecordArray and DomainReceivingRecordArrayOutput values.
// You can construct a concrete instance of `DomainReceivingRecordArrayInput` via:
//
//          DomainReceivingRecordArray{ DomainReceivingRecordArgs{...} }
type DomainReceivingRecordArrayInput interface {
	pulumi.Input

	ToDomainReceivingRecordArrayOutput() DomainReceivingRecordArrayOutput
	ToDomainReceivingRecordArrayOutputWithContext(context.Context) DomainReceivingRecordArrayOutput
}

type DomainReceivingRecordArray []DomainReceivingRecordInput

func (DomainReceivingRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainReceivingRecord)(nil)).Elem()
}

func (i DomainReceivingRecordArray) ToDomainReceivingRecordArrayOutput() DomainReceivingRecordArrayOutput {
	return i.ToDomainReceivingRecordArrayOutputWithContext(context.Background())
}

func (i DomainReceivingRecordArray) ToDomainReceivingRecordArrayOutputWithContext(ctx context.Context) DomainReceivingRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainReceivingRecordArrayOutput)
}

type DomainReceivingRecordOutput struct{ *pulumi.OutputState }

func (DomainReceivingRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainReceivingRecord)(nil)).Elem()
}

func (o DomainReceivingRecordOutput) ToDomainReceivingRecordOutput() DomainReceivingRecordOutput {
	return o
}

func (o DomainReceivingRecordOutput) ToDomainReceivingRecordOutputWithContext(ctx context.Context) DomainReceivingRecordOutput {
	return o
}

// The priority of the record.
func (o DomainReceivingRecordOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecord) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// The record type.
func (o DomainReceivingRecordOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecord) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

// `"valid"` if the record is valid.
func (o DomainReceivingRecordOutput) Valid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecord) *string { return v.Valid }).(pulumi.StringPtrOutput)
}

// The value of the record.
func (o DomainReceivingRecordOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReceivingRecord) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DomainReceivingRecordArrayOutput struct{ *pulumi.OutputState }

func (DomainReceivingRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainReceivingRecord)(nil)).Elem()
}

func (o DomainReceivingRecordArrayOutput) ToDomainReceivingRecordArrayOutput() DomainReceivingRecordArrayOutput {
	return o
}

func (o DomainReceivingRecordArrayOutput) ToDomainReceivingRecordArrayOutputWithContext(ctx context.Context) DomainReceivingRecordArrayOutput {
	return o
}

func (o DomainReceivingRecordArrayOutput) Index(i pulumi.IntInput) DomainReceivingRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainReceivingRecord {
		return vs[0].([]DomainReceivingRecord)[vs[1].(int)]
	}).(DomainReceivingRecordOutput)
}

type DomainSendingRecord struct {
	// The domain to add to Mailgun
	Name *string `pulumi:"name"`
	// The record type.
	RecordType *string `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid *string `pulumi:"valid"`
	// The value of the record.
	Value *string `pulumi:"value"`
}

// DomainSendingRecordInput is an input type that accepts DomainSendingRecordArgs and DomainSendingRecordOutput values.
// You can construct a concrete instance of `DomainSendingRecordInput` via:
//
//          DomainSendingRecordArgs{...}
type DomainSendingRecordInput interface {
	pulumi.Input

	ToDomainSendingRecordOutput() DomainSendingRecordOutput
	ToDomainSendingRecordOutputWithContext(context.Context) DomainSendingRecordOutput
}

type DomainSendingRecordArgs struct {
	// The domain to add to Mailgun
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The record type.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	// `"valid"` if the record is valid.
	Valid pulumi.StringPtrInput `pulumi:"valid"`
	// The value of the record.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DomainSendingRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSendingRecord)(nil)).Elem()
}

func (i DomainSendingRecordArgs) ToDomainSendingRecordOutput() DomainSendingRecordOutput {
	return i.ToDomainSendingRecordOutputWithContext(context.Background())
}

func (i DomainSendingRecordArgs) ToDomainSendingRecordOutputWithContext(ctx context.Context) DomainSendingRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSendingRecordOutput)
}

// DomainSendingRecordArrayInput is an input type that accepts DomainSendingRecordArray and DomainSendingRecordArrayOutput values.
// You can construct a concrete instance of `DomainSendingRecordArrayInput` via:
//
//          DomainSendingRecordArray{ DomainSendingRecordArgs{...} }
type DomainSendingRecordArrayInput interface {
	pulumi.Input

	ToDomainSendingRecordArrayOutput() DomainSendingRecordArrayOutput
	ToDomainSendingRecordArrayOutputWithContext(context.Context) DomainSendingRecordArrayOutput
}

type DomainSendingRecordArray []DomainSendingRecordInput

func (DomainSendingRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainSendingRecord)(nil)).Elem()
}

func (i DomainSendingRecordArray) ToDomainSendingRecordArrayOutput() DomainSendingRecordArrayOutput {
	return i.ToDomainSendingRecordArrayOutputWithContext(context.Background())
}

func (i DomainSendingRecordArray) ToDomainSendingRecordArrayOutputWithContext(ctx context.Context) DomainSendingRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSendingRecordArrayOutput)
}

type DomainSendingRecordOutput struct{ *pulumi.OutputState }

func (DomainSendingRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSendingRecord)(nil)).Elem()
}

func (o DomainSendingRecordOutput) ToDomainSendingRecordOutput() DomainSendingRecordOutput {
	return o
}

func (o DomainSendingRecordOutput) ToDomainSendingRecordOutputWithContext(ctx context.Context) DomainSendingRecordOutput {
	return o
}

// The domain to add to Mailgun
func (o DomainSendingRecordOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecord) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The record type.
func (o DomainSendingRecordOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecord) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

// `"valid"` if the record is valid.
func (o DomainSendingRecordOutput) Valid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecord) *string { return v.Valid }).(pulumi.StringPtrOutput)
}

// The value of the record.
func (o DomainSendingRecordOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSendingRecord) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DomainSendingRecordArrayOutput struct{ *pulumi.OutputState }

func (DomainSendingRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainSendingRecord)(nil)).Elem()
}

func (o DomainSendingRecordArrayOutput) ToDomainSendingRecordArrayOutput() DomainSendingRecordArrayOutput {
	return o
}

func (o DomainSendingRecordArrayOutput) ToDomainSendingRecordArrayOutputWithContext(ctx context.Context) DomainSendingRecordArrayOutput {
	return o
}

func (o DomainSendingRecordArrayOutput) Index(i pulumi.IntInput) DomainSendingRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainSendingRecord {
		return vs[0].([]DomainSendingRecord)[vs[1].(int)]
	}).(DomainSendingRecordOutput)
}

func init() {
	pulumi.RegisterOutputType(DomainReceivingRecordOutput{})
	pulumi.RegisterOutputType(DomainReceivingRecordArrayOutput{})
	pulumi.RegisterOutputType(DomainSendingRecordOutput{})
	pulumi.RegisterOutputType(DomainSendingRecordArrayOutput{})
}
