// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mailgun

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-mailgun/sdk/v3/go/mailgun/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mailgun/sdk/v3/go/mailgun"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a new Mailgun API key
//			_, err := mailgun.NewApiKey(ctx, "some_key", &mailgun.ApiKeyArgs{
//				Role:        pulumi.String("basic"),
//				Kind:        pulumi.String("user"),
//				Description: pulumi.String("Some key"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ApiKey struct {
	pulumi.CustomResourceState

	// Key description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The reason for the key's disablement.
	DisabledReason pulumi.StringOutput `pulumi:"disabledReason"`
	// Web domain to associate with the key, for keys of `domain` kind.
	DomainName pulumi.StringPtrOutput `pulumi:"domainName"`
	// API key user's email address; should be provided for all keys of `web` kind.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// When the key will expire.
	ExpiresAt pulumi.IntPtrOutput `pulumi:"expiresAt"`
	// Whether or not the key is disabled from use.
	IsDisabled pulumi.BoolOutput `pulumi:"isDisabled"`
	// (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// An email address associated with the key.
	Requestor pulumi.StringOutput `pulumi:"requestor"`
	// (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
	Role pulumi.StringOutput `pulumi:"role"`
	// The full API key secret in plain text.
	Secret pulumi.StringOutput `pulumi:"secret"`
	// API key user's string user ID; should be provided for all keys of `web` kind.
	UserId pulumi.StringPtrOutput `pulumi:"userId"`
	// API key user's name.
	UserName pulumi.StringPtrOutput `pulumi:"userName"`
}

// NewApiKey registers a new resource with the given unique name, arguments, and options.
func NewApiKey(ctx *pulumi.Context,
	name string, args *ApiKeyArgs, opts ...pulumi.ResourceOption) (*ApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiKey
	err := ctx.RegisterResource("mailgun:index/apiKey:ApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiKey gets an existing ApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiKeyState, opts ...pulumi.ResourceOption) (*ApiKey, error) {
	var resource ApiKey
	err := ctx.ReadResource("mailgun:index/apiKey:ApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiKey resources.
type apiKeyState struct {
	// Key description.
	Description *string `pulumi:"description"`
	// The reason for the key's disablement.
	DisabledReason *string `pulumi:"disabledReason"`
	// Web domain to associate with the key, for keys of `domain` kind.
	DomainName *string `pulumi:"domainName"`
	// API key user's email address; should be provided for all keys of `web` kind.
	Email *string `pulumi:"email"`
	// When the key will expire.
	ExpiresAt *int `pulumi:"expiresAt"`
	// Whether or not the key is disabled from use.
	IsDisabled *bool `pulumi:"isDisabled"`
	// (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
	Kind *string `pulumi:"kind"`
	// An email address associated with the key.
	Requestor *string `pulumi:"requestor"`
	// (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
	Role *string `pulumi:"role"`
	// The full API key secret in plain text.
	Secret *string `pulumi:"secret"`
	// API key user's string user ID; should be provided for all keys of `web` kind.
	UserId *string `pulumi:"userId"`
	// API key user's name.
	UserName *string `pulumi:"userName"`
}

type ApiKeyState struct {
	// Key description.
	Description pulumi.StringPtrInput
	// The reason for the key's disablement.
	DisabledReason pulumi.StringPtrInput
	// Web domain to associate with the key, for keys of `domain` kind.
	DomainName pulumi.StringPtrInput
	// API key user's email address; should be provided for all keys of `web` kind.
	Email pulumi.StringPtrInput
	// When the key will expire.
	ExpiresAt pulumi.IntPtrInput
	// Whether or not the key is disabled from use.
	IsDisabled pulumi.BoolPtrInput
	// (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
	Kind pulumi.StringPtrInput
	// An email address associated with the key.
	Requestor pulumi.StringPtrInput
	// (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
	Role pulumi.StringPtrInput
	// The full API key secret in plain text.
	Secret pulumi.StringPtrInput
	// API key user's string user ID; should be provided for all keys of `web` kind.
	UserId pulumi.StringPtrInput
	// API key user's name.
	UserName pulumi.StringPtrInput
}

func (ApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyState)(nil)).Elem()
}

type apiKeyArgs struct {
	// Key description.
	Description *string `pulumi:"description"`
	// Web domain to associate with the key, for keys of `domain` kind.
	DomainName *string `pulumi:"domainName"`
	// API key user's email address; should be provided for all keys of `web` kind.
	Email *string `pulumi:"email"`
	// When the key will expire.
	ExpiresAt *int `pulumi:"expiresAt"`
	// (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
	Kind *string `pulumi:"kind"`
	// (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
	Role string `pulumi:"role"`
	// API key user's string user ID; should be provided for all keys of `web` kind.
	UserId *string `pulumi:"userId"`
	// API key user's name.
	UserName *string `pulumi:"userName"`
}

// The set of arguments for constructing a ApiKey resource.
type ApiKeyArgs struct {
	// Key description.
	Description pulumi.StringPtrInput
	// Web domain to associate with the key, for keys of `domain` kind.
	DomainName pulumi.StringPtrInput
	// API key user's email address; should be provided for all keys of `web` kind.
	Email pulumi.StringPtrInput
	// When the key will expire.
	ExpiresAt pulumi.IntPtrInput
	// (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
	Kind pulumi.StringPtrInput
	// (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
	Role pulumi.StringInput
	// API key user's string user ID; should be provided for all keys of `web` kind.
	UserId pulumi.StringPtrInput
	// API key user's name.
	UserName pulumi.StringPtrInput
}

func (ApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyArgs)(nil)).Elem()
}

type ApiKeyInput interface {
	pulumi.Input

	ToApiKeyOutput() ApiKeyOutput
	ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput
}

func (*ApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKey)(nil)).Elem()
}

func (i *ApiKey) ToApiKeyOutput() ApiKeyOutput {
	return i.ToApiKeyOutputWithContext(context.Background())
}

func (i *ApiKey) ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyOutput)
}

// ApiKeyArrayInput is an input type that accepts ApiKeyArray and ApiKeyArrayOutput values.
// You can construct a concrete instance of `ApiKeyArrayInput` via:
//
//	ApiKeyArray{ ApiKeyArgs{...} }
type ApiKeyArrayInput interface {
	pulumi.Input

	ToApiKeyArrayOutput() ApiKeyArrayOutput
	ToApiKeyArrayOutputWithContext(context.Context) ApiKeyArrayOutput
}

type ApiKeyArray []ApiKeyInput

func (ApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiKey)(nil)).Elem()
}

func (i ApiKeyArray) ToApiKeyArrayOutput() ApiKeyArrayOutput {
	return i.ToApiKeyArrayOutputWithContext(context.Background())
}

func (i ApiKeyArray) ToApiKeyArrayOutputWithContext(ctx context.Context) ApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyArrayOutput)
}

// ApiKeyMapInput is an input type that accepts ApiKeyMap and ApiKeyMapOutput values.
// You can construct a concrete instance of `ApiKeyMapInput` via:
//
//	ApiKeyMap{ "key": ApiKeyArgs{...} }
type ApiKeyMapInput interface {
	pulumi.Input

	ToApiKeyMapOutput() ApiKeyMapOutput
	ToApiKeyMapOutputWithContext(context.Context) ApiKeyMapOutput
}

type ApiKeyMap map[string]ApiKeyInput

func (ApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiKey)(nil)).Elem()
}

func (i ApiKeyMap) ToApiKeyMapOutput() ApiKeyMapOutput {
	return i.ToApiKeyMapOutputWithContext(context.Background())
}

func (i ApiKeyMap) ToApiKeyMapOutputWithContext(ctx context.Context) ApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyMapOutput)
}

type ApiKeyOutput struct{ *pulumi.OutputState }

func (ApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKey)(nil)).Elem()
}

func (o ApiKeyOutput) ToApiKeyOutput() ApiKeyOutput {
	return o
}

func (o ApiKeyOutput) ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput {
	return o
}

// Key description.
func (o ApiKeyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The reason for the key's disablement.
func (o ApiKeyOutput) DisabledReason() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.DisabledReason }).(pulumi.StringOutput)
}

// Web domain to associate with the key, for keys of `domain` kind.
func (o ApiKeyOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringPtrOutput { return v.DomainName }).(pulumi.StringPtrOutput)
}

// API key user's email address; should be provided for all keys of `web` kind.
func (o ApiKeyOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// When the key will expire.
func (o ApiKeyOutput) ExpiresAt() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.IntPtrOutput { return v.ExpiresAt }).(pulumi.IntPtrOutput)
}

// Whether or not the key is disabled from use.
func (o ApiKeyOutput) IsDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.BoolOutput { return v.IsDisabled }).(pulumi.BoolOutput)
}

// (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
func (o ApiKeyOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// An email address associated with the key.
func (o ApiKeyOutput) Requestor() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.Requestor }).(pulumi.StringOutput)
}

// (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
func (o ApiKeyOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The full API key secret in plain text.
func (o ApiKeyOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

// API key user's string user ID; should be provided for all keys of `web` kind.
func (o ApiKeyOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringPtrOutput { return v.UserId }).(pulumi.StringPtrOutput)
}

// API key user's name.
func (o ApiKeyOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringPtrOutput { return v.UserName }).(pulumi.StringPtrOutput)
}

type ApiKeyArrayOutput struct{ *pulumi.OutputState }

func (ApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiKey)(nil)).Elem()
}

func (o ApiKeyArrayOutput) ToApiKeyArrayOutput() ApiKeyArrayOutput {
	return o
}

func (o ApiKeyArrayOutput) ToApiKeyArrayOutputWithContext(ctx context.Context) ApiKeyArrayOutput {
	return o
}

func (o ApiKeyArrayOutput) Index(i pulumi.IntInput) ApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiKey {
		return vs[0].([]*ApiKey)[vs[1].(int)]
	}).(ApiKeyOutput)
}

type ApiKeyMapOutput struct{ *pulumi.OutputState }

func (ApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiKey)(nil)).Elem()
}

func (o ApiKeyMapOutput) ToApiKeyMapOutput() ApiKeyMapOutput {
	return o
}

func (o ApiKeyMapOutput) ToApiKeyMapOutputWithContext(ctx context.Context) ApiKeyMapOutput {
	return o
}

func (o ApiKeyMapOutput) MapIndex(k pulumi.StringInput) ApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiKey {
		return vs[0].(map[string]*ApiKey)[vs[1].(string)]
	}).(ApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyInput)(nil)).Elem(), &ApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyArrayInput)(nil)).Elem(), ApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyMapInput)(nil)).Elem(), ApiKeyMap{})
	pulumi.RegisterOutputType(ApiKeyOutput{})
	pulumi.RegisterOutputType(ApiKeyArrayOutput{})
	pulumi.RegisterOutputType(ApiKeyMapOutput{})
}
