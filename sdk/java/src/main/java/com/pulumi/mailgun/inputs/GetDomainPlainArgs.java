// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mailgun.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDomainPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainPlainArgs Empty = new GetDomainPlainArgs();

    @Import(name="dkimKeySize")
    private @Nullable Integer dkimKeySize;

    public Optional<Integer> dkimKeySize() {
        return Optional.ofNullable(this.dkimKeySize);
    }

    @Import(name="dkimSelector")
    private @Nullable String dkimSelector;

    public Optional<String> dkimSelector() {
        return Optional.ofNullable(this.dkimSelector);
    }

    @Import(name="forceDkimAuthority")
    private @Nullable Boolean forceDkimAuthority;

    public Optional<Boolean> forceDkimAuthority() {
        return Optional.ofNullable(this.forceDkimAuthority);
    }

    /**
     * The name of the domain.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the domain.
     * 
     */
    public String name() {
        return this.name;
    }

    @Import(name="openTracking")
    private @Nullable Boolean openTracking;

    public Optional<Boolean> openTracking() {
        return Optional.ofNullable(this.openTracking);
    }

    /**
     * The region where domain will be created. Default value is `us`.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region where domain will be created. Default value is `us`.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The password to the SMTP server.
     * 
     */
    @Import(name="smtpPassword")
    private @Nullable String smtpPassword;

    /**
     * @return The password to the SMTP server.
     * 
     */
    public Optional<String> smtpPassword() {
        return Optional.ofNullable(this.smtpPassword);
    }

    /**
     * The spam filtering setting.
     * 
     */
    @Import(name="spamAction")
    private @Nullable String spamAction;

    /**
     * @return The spam filtering setting.
     * 
     */
    public Optional<String> spamAction() {
        return Optional.ofNullable(this.spamAction);
    }

    /**
     * Whether or not the domain will accept email for sub-domains.
     * 
     */
    @Import(name="wildcard")
    private @Nullable Boolean wildcard;

    /**
     * @return Whether or not the domain will accept email for sub-domains.
     * 
     */
    public Optional<Boolean> wildcard() {
        return Optional.ofNullable(this.wildcard);
    }

    private GetDomainPlainArgs() {}

    private GetDomainPlainArgs(GetDomainPlainArgs $) {
        this.dkimKeySize = $.dkimKeySize;
        this.dkimSelector = $.dkimSelector;
        this.forceDkimAuthority = $.forceDkimAuthority;
        this.name = $.name;
        this.openTracking = $.openTracking;
        this.region = $.region;
        this.smtpPassword = $.smtpPassword;
        this.spamAction = $.spamAction;
        this.wildcard = $.wildcard;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainPlainArgs $;

        public Builder() {
            $ = new GetDomainPlainArgs();
        }

        public Builder(GetDomainPlainArgs defaults) {
            $ = new GetDomainPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder dkimKeySize(@Nullable Integer dkimKeySize) {
            $.dkimKeySize = dkimKeySize;
            return this;
        }

        public Builder dkimSelector(@Nullable String dkimSelector) {
            $.dkimSelector = dkimSelector;
            return this;
        }

        public Builder forceDkimAuthority(@Nullable Boolean forceDkimAuthority) {
            $.forceDkimAuthority = forceDkimAuthority;
            return this;
        }

        /**
         * @param name The name of the domain.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder openTracking(@Nullable Boolean openTracking) {
            $.openTracking = openTracking;
            return this;
        }

        /**
         * @param region The region where domain will be created. Default value is `us`.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param smtpPassword The password to the SMTP server.
         * 
         * @return builder
         * 
         */
        public Builder smtpPassword(@Nullable String smtpPassword) {
            $.smtpPassword = smtpPassword;
            return this;
        }

        /**
         * @param spamAction The spam filtering setting.
         * 
         * @return builder
         * 
         */
        public Builder spamAction(@Nullable String spamAction) {
            $.spamAction = spamAction;
            return this;
        }

        /**
         * @param wildcard Whether or not the domain will accept email for sub-domains.
         * 
         * @return builder
         * 
         */
        public Builder wildcard(@Nullable Boolean wildcard) {
            $.wildcard = wildcard;
            return this;
        }

        public GetDomainPlainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetDomainPlainArgs", "name");
            }
            return $;
        }
    }

}
