// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mailgun.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDomainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainArgs Empty = new GetDomainArgs();

    @Import(name="dkimKeySize")
    private @Nullable Output<Integer> dkimKeySize;

    public Optional<Output<Integer>> dkimKeySize() {
        return Optional.ofNullable(this.dkimKeySize);
    }

    @Import(name="dkimSelector")
    private @Nullable Output<String> dkimSelector;

    public Optional<Output<String>> dkimSelector() {
        return Optional.ofNullable(this.dkimSelector);
    }

    /**
     * The name of the domain.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the domain.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The password to the SMTP server.
     * 
     */
    @Import(name="smtpPassword")
    private @Nullable Output<String> smtpPassword;

    /**
     * @return The password to the SMTP server.
     * 
     */
    public Optional<Output<String>> smtpPassword() {
        return Optional.ofNullable(this.smtpPassword);
    }

    /**
     * The spam filtering setting.
     * 
     */
    @Import(name="spamAction")
    private @Nullable Output<String> spamAction;

    /**
     * @return The spam filtering setting.
     * 
     */
    public Optional<Output<String>> spamAction() {
        return Optional.ofNullable(this.spamAction);
    }

    /**
     * Whether or not the domain will accept email for sub-domains.
     * 
     */
    @Import(name="wildcard")
    private @Nullable Output<Boolean> wildcard;

    /**
     * @return Whether or not the domain will accept email for sub-domains.
     * 
     */
    public Optional<Output<Boolean>> wildcard() {
        return Optional.ofNullable(this.wildcard);
    }

    private GetDomainArgs() {}

    private GetDomainArgs(GetDomainArgs $) {
        this.dkimKeySize = $.dkimKeySize;
        this.dkimSelector = $.dkimSelector;
        this.name = $.name;
        this.region = $.region;
        this.smtpPassword = $.smtpPassword;
        this.spamAction = $.spamAction;
        this.wildcard = $.wildcard;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainArgs $;

        public Builder() {
            $ = new GetDomainArgs();
        }

        public Builder(GetDomainArgs defaults) {
            $ = new GetDomainArgs(Objects.requireNonNull(defaults));
        }

        public Builder dkimKeySize(@Nullable Output<Integer> dkimKeySize) {
            $.dkimKeySize = dkimKeySize;
            return this;
        }

        public Builder dkimKeySize(Integer dkimKeySize) {
            return dkimKeySize(Output.of(dkimKeySize));
        }

        public Builder dkimSelector(@Nullable Output<String> dkimSelector) {
            $.dkimSelector = dkimSelector;
            return this;
        }

        public Builder dkimSelector(String dkimSelector) {
            return dkimSelector(Output.of(dkimSelector));
        }

        /**
         * @param name The name of the domain.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the domain.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param smtpPassword The password to the SMTP server.
         * 
         * @return builder
         * 
         */
        public Builder smtpPassword(@Nullable Output<String> smtpPassword) {
            $.smtpPassword = smtpPassword;
            return this;
        }

        /**
         * @param smtpPassword The password to the SMTP server.
         * 
         * @return builder
         * 
         */
        public Builder smtpPassword(String smtpPassword) {
            return smtpPassword(Output.of(smtpPassword));
        }

        /**
         * @param spamAction The spam filtering setting.
         * 
         * @return builder
         * 
         */
        public Builder spamAction(@Nullable Output<String> spamAction) {
            $.spamAction = spamAction;
            return this;
        }

        /**
         * @param spamAction The spam filtering setting.
         * 
         * @return builder
         * 
         */
        public Builder spamAction(String spamAction) {
            return spamAction(Output.of(spamAction));
        }

        /**
         * @param wildcard Whether or not the domain will accept email for sub-domains.
         * 
         * @return builder
         * 
         */
        public Builder wildcard(@Nullable Output<Boolean> wildcard) {
            $.wildcard = wildcard;
            return this;
        }

        /**
         * @param wildcard Whether or not the domain will accept email for sub-domains.
         * 
         * @return builder
         * 
         */
        public Builder wildcard(Boolean wildcard) {
            return wildcard(Output.of(wildcard));
        }

        public GetDomainArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
