// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mailgun.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiKeyState extends com.pulumi.resources.ResourceArgs {

    public static final ApiKeyState Empty = new ApiKeyState();

    /**
     * Key description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Key description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The reason for the key&#39;s disablement.
     * 
     */
    @Import(name="disabledReason")
    private @Nullable Output<String> disabledReason;

    /**
     * @return The reason for the key&#39;s disablement.
     * 
     */
    public Optional<Output<String>> disabledReason() {
        return Optional.ofNullable(this.disabledReason);
    }

    /**
     * Web domain to associate with the key, for keys of `domain` kind.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return Web domain to associate with the key, for keys of `domain` kind.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * API key user&#39;s email address; should be provided for all keys of `web` kind.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return API key user&#39;s email address; should be provided for all keys of `web` kind.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * When the key will expire.
     * 
     */
    @Import(name="expiresAt")
    private @Nullable Output<Integer> expiresAt;

    /**
     * @return When the key will expire.
     * 
     */
    public Optional<Output<Integer>> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * Whether or not the key is disabled from use.
     * 
     */
    @Import(name="isDisabled")
    private @Nullable Output<Boolean> isDisabled;

    /**
     * @return Whether or not the key is disabled from use.
     * 
     */
    public Optional<Output<Boolean>> isDisabled() {
        return Optional.ofNullable(this.isDisabled);
    }

    /**
     * (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * An email address associated with the key.
     * 
     */
    @Import(name="requestor")
    private @Nullable Output<String> requestor;

    /**
     * @return An email address associated with the key.
     * 
     */
    public Optional<Output<String>> requestor() {
        return Optional.ofNullable(this.requestor);
    }

    /**
     * (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The full API key secret in plain text.
     * 
     */
    @Import(name="secret")
    private @Nullable Output<String> secret;

    /**
     * @return The full API key secret in plain text.
     * 
     */
    public Optional<Output<String>> secret() {
        return Optional.ofNullable(this.secret);
    }

    /**
     * API key user&#39;s string user ID; should be provided for all keys of `web` kind.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return API key user&#39;s string user ID; should be provided for all keys of `web` kind.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    /**
     * API key user&#39;s name.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return API key user&#39;s name.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private ApiKeyState() {}

    private ApiKeyState(ApiKeyState $) {
        this.description = $.description;
        this.disabledReason = $.disabledReason;
        this.domainName = $.domainName;
        this.email = $.email;
        this.expiresAt = $.expiresAt;
        this.isDisabled = $.isDisabled;
        this.kind = $.kind;
        this.requestor = $.requestor;
        this.role = $.role;
        this.secret = $.secret;
        this.userId = $.userId;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiKeyState $;

        public Builder() {
            $ = new ApiKeyState();
        }

        public Builder(ApiKeyState defaults) {
            $ = new ApiKeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Key description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Key description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disabledReason The reason for the key&#39;s disablement.
         * 
         * @return builder
         * 
         */
        public Builder disabledReason(@Nullable Output<String> disabledReason) {
            $.disabledReason = disabledReason;
            return this;
        }

        /**
         * @param disabledReason The reason for the key&#39;s disablement.
         * 
         * @return builder
         * 
         */
        public Builder disabledReason(String disabledReason) {
            return disabledReason(Output.of(disabledReason));
        }

        /**
         * @param domainName Web domain to associate with the key, for keys of `domain` kind.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Web domain to associate with the key, for keys of `domain` kind.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param email API key user&#39;s email address; should be provided for all keys of `web` kind.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email API key user&#39;s email address; should be provided for all keys of `web` kind.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param expiresAt When the key will expire.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(@Nullable Output<Integer> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        /**
         * @param expiresAt When the key will expire.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(Integer expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        /**
         * @param isDisabled Whether or not the key is disabled from use.
         * 
         * @return builder
         * 
         */
        public Builder isDisabled(@Nullable Output<Boolean> isDisabled) {
            $.isDisabled = isDisabled;
            return this;
        }

        /**
         * @param isDisabled Whether or not the key is disabled from use.
         * 
         * @return builder
         * 
         */
        public Builder isDisabled(Boolean isDisabled) {
            return isDisabled(Output.of(isDisabled));
        }

        /**
         * @param kind (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param requestor An email address associated with the key.
         * 
         * @return builder
         * 
         */
        public Builder requestor(@Nullable Output<String> requestor) {
            $.requestor = requestor;
            return this;
        }

        /**
         * @param requestor An email address associated with the key.
         * 
         * @return builder
         * 
         */
        public Builder requestor(String requestor) {
            return requestor(Output.of(requestor));
        }

        /**
         * @param role (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param secret The full API key secret in plain text.
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret The full API key secret in plain text.
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        /**
         * @param userId API key user&#39;s string user ID; should be provided for all keys of `web` kind.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId API key user&#39;s string user ID; should be provided for all keys of `web` kind.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        /**
         * @param userName API key user&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName API key user&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public ApiKeyState build() {
            return $;
        }
    }

}
