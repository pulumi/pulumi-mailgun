// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mailgun.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mailgun.inputs.DomainReceivingRecordArgs;
import com.pulumi.mailgun.inputs.DomainReceivingRecordsSetArgs;
import com.pulumi.mailgun.inputs.DomainSendingRecordArgs;
import com.pulumi.mailgun.inputs.DomainSendingRecordsSetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainState extends com.pulumi.resources.ResourceArgs {

    public static final DomainState Empty = new DomainState();

    /**
     * (Enum: `yes` or `no`) The click tracking settings for the domain. Default: `no`
     * 
     */
    @Import(name="clickTracking")
    private @Nullable Output<Boolean> clickTracking;

    /**
     * @return (Enum: `yes` or `no`) The click tracking settings for the domain. Default: `no`
     * 
     */
    public Optional<Output<Boolean>> clickTracking() {
        return Optional.ofNullable(this.clickTracking);
    }

    /**
     * The length of your domain’s generated DKIM key. Default value is `1024`.
     * 
     */
    @Import(name="dkimKeySize")
    private @Nullable Output<Integer> dkimKeySize;

    /**
     * @return The length of your domain’s generated DKIM key. Default value is `1024`.
     * 
     */
    public Optional<Output<Integer>> dkimKeySize() {
        return Optional.ofNullable(this.dkimKeySize);
    }

    /**
     * The name of your DKIM selector if you want to specify it whereas MailGun will make it&#39;s own choice.
     * 
     */
    @Import(name="dkimSelector")
    private @Nullable Output<String> dkimSelector;

    /**
     * @return The name of your DKIM selector if you want to specify it whereas MailGun will make it&#39;s own choice.
     * 
     */
    public Optional<Output<String>> dkimSelector() {
        return Optional.ofNullable(this.dkimSelector);
    }

    /**
     * If set to true, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account. If set to false, the domain will have the same DKIM authority as the root domain registered on the same mailgun account. The default is `false`.
     * 
     */
    @Import(name="forceDkimAuthority")
    private @Nullable Output<Boolean> forceDkimAuthority;

    /**
     * @return If set to true, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account. If set to false, the domain will have the same DKIM authority as the root domain registered on the same mailgun account. The default is `false`.
     * 
     */
    public Optional<Output<Boolean>> forceDkimAuthority() {
        return Optional.ofNullable(this.forceDkimAuthority);
    }

    /**
     * The domain to add to Mailgun
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The domain to add to Mailgun
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Enum: `yes` or `no`) The open tracking settings for the domain. Default: `no`
     * 
     */
    @Import(name="openTracking")
    private @Nullable Output<Boolean> openTracking;

    /**
     * @return (Enum: `yes` or `no`) The open tracking settings for the domain. Default: `no`
     * 
     */
    public Optional<Output<Boolean>> openTracking() {
        return Optional.ofNullable(this.openTracking);
    }

    /**
     * A list of DNS records for receiving validation.  **Deprecated** Use `receiving_records_set` instead.
     * 
     * @deprecated
     * Use `receiving_records_set` instead.
     * 
     */
    @Deprecated /* Use `receiving_records_set` instead. */
    @Import(name="receivingRecords")
    private @Nullable Output<List<DomainReceivingRecordArgs>> receivingRecords;

    /**
     * @return A list of DNS records for receiving validation.  **Deprecated** Use `receiving_records_set` instead.
     * 
     * @deprecated
     * Use `receiving_records_set` instead.
     * 
     */
    @Deprecated /* Use `receiving_records_set` instead. */
    public Optional<Output<List<DomainReceivingRecordArgs>>> receivingRecords() {
        return Optional.ofNullable(this.receivingRecords);
    }

    /**
     * A set of DNS records for receiving validation.
     * 
     */
    @Import(name="receivingRecordsSets")
    private @Nullable Output<List<DomainReceivingRecordsSetArgs>> receivingRecordsSets;

    /**
     * @return A set of DNS records for receiving validation.
     * 
     */
    public Optional<Output<List<DomainReceivingRecordsSetArgs>>> receivingRecordsSets() {
        return Optional.ofNullable(this.receivingRecordsSets);
    }

    /**
     * The region where domain will be created. Default value is `us`.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region where domain will be created. Default value is `us`.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * A list of DNS records for sending validation. **Deprecated** Use `sending_records_set` instead.
     * 
     * @deprecated
     * Use `sending_records_set` instead.
     * 
     */
    @Deprecated /* Use `sending_records_set` instead. */
    @Import(name="sendingRecords")
    private @Nullable Output<List<DomainSendingRecordArgs>> sendingRecords;

    /**
     * @return A list of DNS records for sending validation. **Deprecated** Use `sending_records_set` instead.
     * 
     * @deprecated
     * Use `sending_records_set` instead.
     * 
     */
    @Deprecated /* Use `sending_records_set` instead. */
    public Optional<Output<List<DomainSendingRecordArgs>>> sendingRecords() {
        return Optional.ofNullable(this.sendingRecords);
    }

    /**
     * A set of DNS records for sending validation.
     * 
     */
    @Import(name="sendingRecordsSets")
    private @Nullable Output<List<DomainSendingRecordsSetArgs>> sendingRecordsSets;

    /**
     * @return A set of DNS records for sending validation.
     * 
     */
    public Optional<Output<List<DomainSendingRecordsSetArgs>>> sendingRecordsSets() {
        return Optional.ofNullable(this.sendingRecordsSets);
    }

    /**
     * The login email for the SMTP server.
     * 
     */
    @Import(name="smtpLogin")
    private @Nullable Output<String> smtpLogin;

    /**
     * @return The login email for the SMTP server.
     * 
     */
    public Optional<Output<String>> smtpLogin() {
        return Optional.ofNullable(this.smtpLogin);
    }

    /**
     * Password for SMTP authentication
     * 
     */
    @Import(name="smtpPassword")
    private @Nullable Output<String> smtpPassword;

    /**
     * @return Password for SMTP authentication
     * 
     */
    public Optional<Output<String>> smtpPassword() {
        return Optional.ofNullable(this.smtpPassword);
    }

    /**
     * `disabled` or `tag` Disable, no spam
     * filtering will occur for inbound messages. Tag, messages
     * will be tagged with a spam header. Default value is `disabled`.
     * 
     */
    @Import(name="spamAction")
    private @Nullable Output<String> spamAction;

    /**
     * @return `disabled` or `tag` Disable, no spam
     * filtering will occur for inbound messages. Tag, messages
     * will be tagged with a spam header. Default value is `disabled`.
     * 
     */
    public Optional<Output<String>> spamAction() {
        return Optional.ofNullable(this.spamAction);
    }

    /**
     * (`http` or `https`) The tracking web scheme. Default: `http`
     * 
     */
    @Import(name="webScheme")
    private @Nullable Output<String> webScheme;

    /**
     * @return (`http` or `https`) The tracking web scheme. Default: `http`
     * 
     */
    public Optional<Output<String>> webScheme() {
        return Optional.ofNullable(this.webScheme);
    }

    /**
     * Boolean that determines whether
     * the domain will accept email for sub-domains.
     * 
     */
    @Import(name="wildcard")
    private @Nullable Output<Boolean> wildcard;

    /**
     * @return Boolean that determines whether
     * the domain will accept email for sub-domains.
     * 
     */
    public Optional<Output<Boolean>> wildcard() {
        return Optional.ofNullable(this.wildcard);
    }

    private DomainState() {}

    private DomainState(DomainState $) {
        this.clickTracking = $.clickTracking;
        this.dkimKeySize = $.dkimKeySize;
        this.dkimSelector = $.dkimSelector;
        this.forceDkimAuthority = $.forceDkimAuthority;
        this.name = $.name;
        this.openTracking = $.openTracking;
        this.receivingRecords = $.receivingRecords;
        this.receivingRecordsSets = $.receivingRecordsSets;
        this.region = $.region;
        this.sendingRecords = $.sendingRecords;
        this.sendingRecordsSets = $.sendingRecordsSets;
        this.smtpLogin = $.smtpLogin;
        this.smtpPassword = $.smtpPassword;
        this.spamAction = $.spamAction;
        this.webScheme = $.webScheme;
        this.wildcard = $.wildcard;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainState $;

        public Builder() {
            $ = new DomainState();
        }

        public Builder(DomainState defaults) {
            $ = new DomainState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clickTracking (Enum: `yes` or `no`) The click tracking settings for the domain. Default: `no`
         * 
         * @return builder
         * 
         */
        public Builder clickTracking(@Nullable Output<Boolean> clickTracking) {
            $.clickTracking = clickTracking;
            return this;
        }

        /**
         * @param clickTracking (Enum: `yes` or `no`) The click tracking settings for the domain. Default: `no`
         * 
         * @return builder
         * 
         */
        public Builder clickTracking(Boolean clickTracking) {
            return clickTracking(Output.of(clickTracking));
        }

        /**
         * @param dkimKeySize The length of your domain’s generated DKIM key. Default value is `1024`.
         * 
         * @return builder
         * 
         */
        public Builder dkimKeySize(@Nullable Output<Integer> dkimKeySize) {
            $.dkimKeySize = dkimKeySize;
            return this;
        }

        /**
         * @param dkimKeySize The length of your domain’s generated DKIM key. Default value is `1024`.
         * 
         * @return builder
         * 
         */
        public Builder dkimKeySize(Integer dkimKeySize) {
            return dkimKeySize(Output.of(dkimKeySize));
        }

        /**
         * @param dkimSelector The name of your DKIM selector if you want to specify it whereas MailGun will make it&#39;s own choice.
         * 
         * @return builder
         * 
         */
        public Builder dkimSelector(@Nullable Output<String> dkimSelector) {
            $.dkimSelector = dkimSelector;
            return this;
        }

        /**
         * @param dkimSelector The name of your DKIM selector if you want to specify it whereas MailGun will make it&#39;s own choice.
         * 
         * @return builder
         * 
         */
        public Builder dkimSelector(String dkimSelector) {
            return dkimSelector(Output.of(dkimSelector));
        }

        /**
         * @param forceDkimAuthority If set to true, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account. If set to false, the domain will have the same DKIM authority as the root domain registered on the same mailgun account. The default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder forceDkimAuthority(@Nullable Output<Boolean> forceDkimAuthority) {
            $.forceDkimAuthority = forceDkimAuthority;
            return this;
        }

        /**
         * @param forceDkimAuthority If set to true, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account. If set to false, the domain will have the same DKIM authority as the root domain registered on the same mailgun account. The default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder forceDkimAuthority(Boolean forceDkimAuthority) {
            return forceDkimAuthority(Output.of(forceDkimAuthority));
        }

        /**
         * @param name The domain to add to Mailgun
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The domain to add to Mailgun
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param openTracking (Enum: `yes` or `no`) The open tracking settings for the domain. Default: `no`
         * 
         * @return builder
         * 
         */
        public Builder openTracking(@Nullable Output<Boolean> openTracking) {
            $.openTracking = openTracking;
            return this;
        }

        /**
         * @param openTracking (Enum: `yes` or `no`) The open tracking settings for the domain. Default: `no`
         * 
         * @return builder
         * 
         */
        public Builder openTracking(Boolean openTracking) {
            return openTracking(Output.of(openTracking));
        }

        /**
         * @param receivingRecords A list of DNS records for receiving validation.  **Deprecated** Use `receiving_records_set` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `receiving_records_set` instead.
         * 
         */
        @Deprecated /* Use `receiving_records_set` instead. */
        public Builder receivingRecords(@Nullable Output<List<DomainReceivingRecordArgs>> receivingRecords) {
            $.receivingRecords = receivingRecords;
            return this;
        }

        /**
         * @param receivingRecords A list of DNS records for receiving validation.  **Deprecated** Use `receiving_records_set` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `receiving_records_set` instead.
         * 
         */
        @Deprecated /* Use `receiving_records_set` instead. */
        public Builder receivingRecords(List<DomainReceivingRecordArgs> receivingRecords) {
            return receivingRecords(Output.of(receivingRecords));
        }

        /**
         * @param receivingRecords A list of DNS records for receiving validation.  **Deprecated** Use `receiving_records_set` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `receiving_records_set` instead.
         * 
         */
        @Deprecated /* Use `receiving_records_set` instead. */
        public Builder receivingRecords(DomainReceivingRecordArgs... receivingRecords) {
            return receivingRecords(List.of(receivingRecords));
        }

        /**
         * @param receivingRecordsSets A set of DNS records for receiving validation.
         * 
         * @return builder
         * 
         */
        public Builder receivingRecordsSets(@Nullable Output<List<DomainReceivingRecordsSetArgs>> receivingRecordsSets) {
            $.receivingRecordsSets = receivingRecordsSets;
            return this;
        }

        /**
         * @param receivingRecordsSets A set of DNS records for receiving validation.
         * 
         * @return builder
         * 
         */
        public Builder receivingRecordsSets(List<DomainReceivingRecordsSetArgs> receivingRecordsSets) {
            return receivingRecordsSets(Output.of(receivingRecordsSets));
        }

        /**
         * @param receivingRecordsSets A set of DNS records for receiving validation.
         * 
         * @return builder
         * 
         */
        public Builder receivingRecordsSets(DomainReceivingRecordsSetArgs... receivingRecordsSets) {
            return receivingRecordsSets(List.of(receivingRecordsSets));
        }

        /**
         * @param region The region where domain will be created. Default value is `us`.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region where domain will be created. Default value is `us`.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param sendingRecords A list of DNS records for sending validation. **Deprecated** Use `sending_records_set` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `sending_records_set` instead.
         * 
         */
        @Deprecated /* Use `sending_records_set` instead. */
        public Builder sendingRecords(@Nullable Output<List<DomainSendingRecordArgs>> sendingRecords) {
            $.sendingRecords = sendingRecords;
            return this;
        }

        /**
         * @param sendingRecords A list of DNS records for sending validation. **Deprecated** Use `sending_records_set` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `sending_records_set` instead.
         * 
         */
        @Deprecated /* Use `sending_records_set` instead. */
        public Builder sendingRecords(List<DomainSendingRecordArgs> sendingRecords) {
            return sendingRecords(Output.of(sendingRecords));
        }

        /**
         * @param sendingRecords A list of DNS records for sending validation. **Deprecated** Use `sending_records_set` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `sending_records_set` instead.
         * 
         */
        @Deprecated /* Use `sending_records_set` instead. */
        public Builder sendingRecords(DomainSendingRecordArgs... sendingRecords) {
            return sendingRecords(List.of(sendingRecords));
        }

        /**
         * @param sendingRecordsSets A set of DNS records for sending validation.
         * 
         * @return builder
         * 
         */
        public Builder sendingRecordsSets(@Nullable Output<List<DomainSendingRecordsSetArgs>> sendingRecordsSets) {
            $.sendingRecordsSets = sendingRecordsSets;
            return this;
        }

        /**
         * @param sendingRecordsSets A set of DNS records for sending validation.
         * 
         * @return builder
         * 
         */
        public Builder sendingRecordsSets(List<DomainSendingRecordsSetArgs> sendingRecordsSets) {
            return sendingRecordsSets(Output.of(sendingRecordsSets));
        }

        /**
         * @param sendingRecordsSets A set of DNS records for sending validation.
         * 
         * @return builder
         * 
         */
        public Builder sendingRecordsSets(DomainSendingRecordsSetArgs... sendingRecordsSets) {
            return sendingRecordsSets(List.of(sendingRecordsSets));
        }

        /**
         * @param smtpLogin The login email for the SMTP server.
         * 
         * @return builder
         * 
         */
        public Builder smtpLogin(@Nullable Output<String> smtpLogin) {
            $.smtpLogin = smtpLogin;
            return this;
        }

        /**
         * @param smtpLogin The login email for the SMTP server.
         * 
         * @return builder
         * 
         */
        public Builder smtpLogin(String smtpLogin) {
            return smtpLogin(Output.of(smtpLogin));
        }

        /**
         * @param smtpPassword Password for SMTP authentication
         * 
         * @return builder
         * 
         */
        public Builder smtpPassword(@Nullable Output<String> smtpPassword) {
            $.smtpPassword = smtpPassword;
            return this;
        }

        /**
         * @param smtpPassword Password for SMTP authentication
         * 
         * @return builder
         * 
         */
        public Builder smtpPassword(String smtpPassword) {
            return smtpPassword(Output.of(smtpPassword));
        }

        /**
         * @param spamAction `disabled` or `tag` Disable, no spam
         * filtering will occur for inbound messages. Tag, messages
         * will be tagged with a spam header. Default value is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder spamAction(@Nullable Output<String> spamAction) {
            $.spamAction = spamAction;
            return this;
        }

        /**
         * @param spamAction `disabled` or `tag` Disable, no spam
         * filtering will occur for inbound messages. Tag, messages
         * will be tagged with a spam header. Default value is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder spamAction(String spamAction) {
            return spamAction(Output.of(spamAction));
        }

        /**
         * @param webScheme (`http` or `https`) The tracking web scheme. Default: `http`
         * 
         * @return builder
         * 
         */
        public Builder webScheme(@Nullable Output<String> webScheme) {
            $.webScheme = webScheme;
            return this;
        }

        /**
         * @param webScheme (`http` or `https`) The tracking web scheme. Default: `http`
         * 
         * @return builder
         * 
         */
        public Builder webScheme(String webScheme) {
            return webScheme(Output.of(webScheme));
        }

        /**
         * @param wildcard Boolean that determines whether
         * the domain will accept email for sub-domains.
         * 
         * @return builder
         * 
         */
        public Builder wildcard(@Nullable Output<Boolean> wildcard) {
            $.wildcard = wildcard;
            return this;
        }

        /**
         * @param wildcard Boolean that determines whether
         * the domain will accept email for sub-domains.
         * 
         * @return builder
         * 
         */
        public Builder wildcard(Boolean wildcard) {
            return wildcard(Output.of(wildcard));
        }

        public DomainState build() {
            return $;
        }
    }

}
