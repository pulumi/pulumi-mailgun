// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mailgun.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mailgun.inputs.DomainReceivingRecordArgs;
import com.pulumi.mailgun.inputs.DomainSendingRecordArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainState extends com.pulumi.resources.ResourceArgs {

    public static final DomainState Empty = new DomainState();

    /**
     * The length of your domain’s generated DKIM key. Default value is `1024`.
     * 
     */
    @Import(name="dkimKeySize")
    private @Nullable Output<Integer> dkimKeySize;

    /**
     * @return The length of your domain’s generated DKIM key. Default value is `1024`.
     * 
     */
    public Optional<Output<Integer>> dkimKeySize() {
        return Optional.ofNullable(this.dkimKeySize);
    }

    /**
     * The name of your DKIM selector if you want to specify it whereas MailGun will make it&#39;s own choice.
     * 
     */
    @Import(name="dkimSelector")
    private @Nullable Output<String> dkimSelector;

    /**
     * @return The name of your DKIM selector if you want to specify it whereas MailGun will make it&#39;s own choice.
     * 
     */
    public Optional<Output<String>> dkimSelector() {
        return Optional.ofNullable(this.dkimSelector);
    }

    /**
     * The domain to add to Mailgun
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The domain to add to Mailgun
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of DNS records for receiving validation.
     * 
     */
    @Import(name="receivingRecords")
    private @Nullable Output<List<DomainReceivingRecordArgs>> receivingRecords;

    /**
     * @return A list of DNS records for receiving validation.
     * 
     */
    public Optional<Output<List<DomainReceivingRecordArgs>>> receivingRecords() {
        return Optional.ofNullable(this.receivingRecords);
    }

    /**
     * The region where domain will be created. Default value is `us`.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region where domain will be created. Default value is `us`.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * A list of DNS records for sending validation.
     * 
     */
    @Import(name="sendingRecords")
    private @Nullable Output<List<DomainSendingRecordArgs>> sendingRecords;

    /**
     * @return A list of DNS records for sending validation.
     * 
     */
    public Optional<Output<List<DomainSendingRecordArgs>>> sendingRecords() {
        return Optional.ofNullable(this.sendingRecords);
    }

    /**
     * The login email for the SMTP server.
     * 
     */
    @Import(name="smtpLogin")
    private @Nullable Output<String> smtpLogin;

    /**
     * @return The login email for the SMTP server.
     * 
     */
    public Optional<Output<String>> smtpLogin() {
        return Optional.ofNullable(this.smtpLogin);
    }

    /**
     * Password for SMTP authentication
     * 
     */
    @Import(name="smtpPassword")
    private @Nullable Output<String> smtpPassword;

    /**
     * @return Password for SMTP authentication
     * 
     */
    public Optional<Output<String>> smtpPassword() {
        return Optional.ofNullable(this.smtpPassword);
    }

    /**
     * `disabled` or `tag` Disable, no spam
     * filtering will occur for inbound messages. Tag, messages
     * will be tagged with a spam header.
     * 
     */
    @Import(name="spamAction")
    private @Nullable Output<String> spamAction;

    /**
     * @return `disabled` or `tag` Disable, no spam
     * filtering will occur for inbound messages. Tag, messages
     * will be tagged with a spam header.
     * 
     */
    public Optional<Output<String>> spamAction() {
        return Optional.ofNullable(this.spamAction);
    }

    /**
     * Boolean that determines whether
     * the domain will accept email for sub-domains.
     * 
     */
    @Import(name="wildcard")
    private @Nullable Output<Boolean> wildcard;

    /**
     * @return Boolean that determines whether
     * the domain will accept email for sub-domains.
     * 
     */
    public Optional<Output<Boolean>> wildcard() {
        return Optional.ofNullable(this.wildcard);
    }

    private DomainState() {}

    private DomainState(DomainState $) {
        this.dkimKeySize = $.dkimKeySize;
        this.dkimSelector = $.dkimSelector;
        this.name = $.name;
        this.receivingRecords = $.receivingRecords;
        this.region = $.region;
        this.sendingRecords = $.sendingRecords;
        this.smtpLogin = $.smtpLogin;
        this.smtpPassword = $.smtpPassword;
        this.spamAction = $.spamAction;
        this.wildcard = $.wildcard;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainState $;

        public Builder() {
            $ = new DomainState();
        }

        public Builder(DomainState defaults) {
            $ = new DomainState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dkimKeySize The length of your domain’s generated DKIM key. Default value is `1024`.
         * 
         * @return builder
         * 
         */
        public Builder dkimKeySize(@Nullable Output<Integer> dkimKeySize) {
            $.dkimKeySize = dkimKeySize;
            return this;
        }

        /**
         * @param dkimKeySize The length of your domain’s generated DKIM key. Default value is `1024`.
         * 
         * @return builder
         * 
         */
        public Builder dkimKeySize(Integer dkimKeySize) {
            return dkimKeySize(Output.of(dkimKeySize));
        }

        /**
         * @param dkimSelector The name of your DKIM selector if you want to specify it whereas MailGun will make it&#39;s own choice.
         * 
         * @return builder
         * 
         */
        public Builder dkimSelector(@Nullable Output<String> dkimSelector) {
            $.dkimSelector = dkimSelector;
            return this;
        }

        /**
         * @param dkimSelector The name of your DKIM selector if you want to specify it whereas MailGun will make it&#39;s own choice.
         * 
         * @return builder
         * 
         */
        public Builder dkimSelector(String dkimSelector) {
            return dkimSelector(Output.of(dkimSelector));
        }

        /**
         * @param name The domain to add to Mailgun
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The domain to add to Mailgun
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param receivingRecords A list of DNS records for receiving validation.
         * 
         * @return builder
         * 
         */
        public Builder receivingRecords(@Nullable Output<List<DomainReceivingRecordArgs>> receivingRecords) {
            $.receivingRecords = receivingRecords;
            return this;
        }

        /**
         * @param receivingRecords A list of DNS records for receiving validation.
         * 
         * @return builder
         * 
         */
        public Builder receivingRecords(List<DomainReceivingRecordArgs> receivingRecords) {
            return receivingRecords(Output.of(receivingRecords));
        }

        /**
         * @param receivingRecords A list of DNS records for receiving validation.
         * 
         * @return builder
         * 
         */
        public Builder receivingRecords(DomainReceivingRecordArgs... receivingRecords) {
            return receivingRecords(List.of(receivingRecords));
        }

        /**
         * @param region The region where domain will be created. Default value is `us`.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region where domain will be created. Default value is `us`.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param sendingRecords A list of DNS records for sending validation.
         * 
         * @return builder
         * 
         */
        public Builder sendingRecords(@Nullable Output<List<DomainSendingRecordArgs>> sendingRecords) {
            $.sendingRecords = sendingRecords;
            return this;
        }

        /**
         * @param sendingRecords A list of DNS records for sending validation.
         * 
         * @return builder
         * 
         */
        public Builder sendingRecords(List<DomainSendingRecordArgs> sendingRecords) {
            return sendingRecords(Output.of(sendingRecords));
        }

        /**
         * @param sendingRecords A list of DNS records for sending validation.
         * 
         * @return builder
         * 
         */
        public Builder sendingRecords(DomainSendingRecordArgs... sendingRecords) {
            return sendingRecords(List.of(sendingRecords));
        }

        /**
         * @param smtpLogin The login email for the SMTP server.
         * 
         * @return builder
         * 
         */
        public Builder smtpLogin(@Nullable Output<String> smtpLogin) {
            $.smtpLogin = smtpLogin;
            return this;
        }

        /**
         * @param smtpLogin The login email for the SMTP server.
         * 
         * @return builder
         * 
         */
        public Builder smtpLogin(String smtpLogin) {
            return smtpLogin(Output.of(smtpLogin));
        }

        /**
         * @param smtpPassword Password for SMTP authentication
         * 
         * @return builder
         * 
         */
        public Builder smtpPassword(@Nullable Output<String> smtpPassword) {
            $.smtpPassword = smtpPassword;
            return this;
        }

        /**
         * @param smtpPassword Password for SMTP authentication
         * 
         * @return builder
         * 
         */
        public Builder smtpPassword(String smtpPassword) {
            return smtpPassword(Output.of(smtpPassword));
        }

        /**
         * @param spamAction `disabled` or `tag` Disable, no spam
         * filtering will occur for inbound messages. Tag, messages
         * will be tagged with a spam header.
         * 
         * @return builder
         * 
         */
        public Builder spamAction(@Nullable Output<String> spamAction) {
            $.spamAction = spamAction;
            return this;
        }

        /**
         * @param spamAction `disabled` or `tag` Disable, no spam
         * filtering will occur for inbound messages. Tag, messages
         * will be tagged with a spam header.
         * 
         * @return builder
         * 
         */
        public Builder spamAction(String spamAction) {
            return spamAction(Output.of(spamAction));
        }

        /**
         * @param wildcard Boolean that determines whether
         * the domain will accept email for sub-domains.
         * 
         * @return builder
         * 
         */
        public Builder wildcard(@Nullable Output<Boolean> wildcard) {
            $.wildcard = wildcard;
            return this;
        }

        /**
         * @param wildcard Boolean that determines whether
         * the domain will accept email for sub-domains.
         * 
         * @return builder
         * 
         */
        public Builder wildcard(Boolean wildcard) {
            return wildcard(Output.of(wildcard));
        }

        public DomainState build() {
            return $;
        }
    }

}
