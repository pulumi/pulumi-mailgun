// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mailgun;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiKeyArgs Empty = new ApiKeyArgs();

    /**
     * Key description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Key description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Web domain to associate with the key, for keys of `domain` kind.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return Web domain to associate with the key, for keys of `domain` kind.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * API key user&#39;s email address; should be provided for all keys of `web` kind.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return API key user&#39;s email address; should be provided for all keys of `web` kind.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * When the key will expire.
     * 
     */
    @Import(name="expiresAt")
    private @Nullable Output<Integer> expiresAt;

    /**
     * @return When the key will expire.
     * 
     */
    public Optional<Output<Integer>> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    /**
     * API key user&#39;s string user ID; should be provided for all keys of `web` kind.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return API key user&#39;s string user ID; should be provided for all keys of `web` kind.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    /**
     * API key user&#39;s name.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return API key user&#39;s name.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private ApiKeyArgs() {}

    private ApiKeyArgs(ApiKeyArgs $) {
        this.description = $.description;
        this.domainName = $.domainName;
        this.email = $.email;
        this.expiresAt = $.expiresAt;
        this.kind = $.kind;
        this.role = $.role;
        this.userId = $.userId;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiKeyArgs $;

        public Builder() {
            $ = new ApiKeyArgs();
        }

        public Builder(ApiKeyArgs defaults) {
            $ = new ApiKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Key description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Key description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domainName Web domain to associate with the key, for keys of `domain` kind.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Web domain to associate with the key, for keys of `domain` kind.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param email API key user&#39;s email address; should be provided for all keys of `web` kind.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email API key user&#39;s email address; should be provided for all keys of `web` kind.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param expiresAt When the key will expire.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(@Nullable Output<Integer> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        /**
         * @param expiresAt When the key will expire.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(Integer expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        /**
         * @param kind (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind (Enum:`domain`, `user`, or `web`). API key type. Default: `user`.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param role (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role (Enum: `admin`, `basic`, `sending`, `support`, or `developer`) Key role.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param userId API key user&#39;s string user ID; should be provided for all keys of `web` kind.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId API key user&#39;s string user ID; should be provided for all keys of `web` kind.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        /**
         * @param userName API key user&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName API key user&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public ApiKeyArgs build() {
            if ($.role == null) {
                throw new MissingRequiredPropertyException("ApiKeyArgs", "role");
            }
            return $;
        }
    }

}
