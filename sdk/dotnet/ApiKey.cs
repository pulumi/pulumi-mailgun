// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mailgun
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mailgun = Pulumi.Mailgun;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new Mailgun API key
    ///     var someKey = new Mailgun.ApiKey("some_key", new()
    ///     {
    ///         Role = "basic",
    ///         Kind = "user",
    ///         Description = "Some key",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [MailgunResourceType("mailgun:index/apiKey:ApiKey")]
    public partial class ApiKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Key description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The reason for the key's disablement.
        /// </summary>
        [Output("disabledReason")]
        public Output<string> DisabledReason { get; private set; } = null!;

        /// <summary>
        /// Web domain to associate with the key, for keys of `Domain` kind.
        /// </summary>
        [Output("domainName")]
        public Output<string?> DomainName { get; private set; } = null!;

        /// <summary>
        /// API key user's email address; should be provided for all keys of `Web` kind.
        /// </summary>
        [Output("email")]
        public Output<string?> Email { get; private set; } = null!;

        /// <summary>
        /// When the key will expire.
        /// </summary>
        [Output("expiresAt")]
        public Output<int?> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// Whether or not the key is disabled from use.
        /// </summary>
        [Output("isDisabled")]
        public Output<bool> IsDisabled { get; private set; } = null!;

        /// <summary>
        /// (Enum:`Domain`, `User`, or `Web`). API key type. Default: `User`.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// An email address associated with the key.
        /// </summary>
        [Output("requestor")]
        public Output<string> Requestor { get; private set; } = null!;

        /// <summary>
        /// (Enum: `Admin`, `Basic`, `Sending`, `Support`, or `Developer`) Key role.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// The full API key secret in plain text.
        /// </summary>
        [Output("secret")]
        public Output<string> Secret { get; private set; } = null!;

        /// <summary>
        /// API key user's string user ID; should be provided for all keys of `Web` kind.
        /// </summary>
        [Output("userId")]
        public Output<string?> UserId { get; private set; } = null!;

        /// <summary>
        /// API key user's name.
        /// </summary>
        [Output("userName")]
        public Output<string?> UserName { get; private set; } = null!;


        /// <summary>
        /// Create a ApiKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApiKey(string name, ApiKeyArgs args, CustomResourceOptions? options = null)
            : base("mailgun:index/apiKey:ApiKey", name, args ?? new ApiKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApiKey(string name, Input<string> id, ApiKeyState? state = null, CustomResourceOptions? options = null)
            : base("mailgun:index/apiKey:ApiKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "secret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApiKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApiKey Get(string name, Input<string> id, ApiKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new ApiKey(name, id, state, options);
        }
    }

    public sealed class ApiKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Key description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Web domain to associate with the key, for keys of `Domain` kind.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// API key user's email address; should be provided for all keys of `Web` kind.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// When the key will expire.
        /// </summary>
        [Input("expiresAt")]
        public Input<int>? ExpiresAt { get; set; }

        /// <summary>
        /// (Enum:`Domain`, `User`, or `Web`). API key type. Default: `User`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// (Enum: `Admin`, `Basic`, `Sending`, `Support`, or `Developer`) Key role.
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        /// <summary>
        /// API key user's string user ID; should be provided for all keys of `Web` kind.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        /// <summary>
        /// API key user's name.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public ApiKeyArgs()
        {
        }
        public static new ApiKeyArgs Empty => new ApiKeyArgs();
    }

    public sealed class ApiKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Key description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The reason for the key's disablement.
        /// </summary>
        [Input("disabledReason")]
        public Input<string>? DisabledReason { get; set; }

        /// <summary>
        /// Web domain to associate with the key, for keys of `Domain` kind.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// API key user's email address; should be provided for all keys of `Web` kind.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// When the key will expire.
        /// </summary>
        [Input("expiresAt")]
        public Input<int>? ExpiresAt { get; set; }

        /// <summary>
        /// Whether or not the key is disabled from use.
        /// </summary>
        [Input("isDisabled")]
        public Input<bool>? IsDisabled { get; set; }

        /// <summary>
        /// (Enum:`Domain`, `User`, or `Web`). API key type. Default: `User`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// An email address associated with the key.
        /// </summary>
        [Input("requestor")]
        public Input<string>? Requestor { get; set; }

        /// <summary>
        /// (Enum: `Admin`, `Basic`, `Sending`, `Support`, or `Developer`) Key role.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// The full API key secret in plain text.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// API key user's string user ID; should be provided for all keys of `Web` kind.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        /// <summary>
        /// API key user's name.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public ApiKeyState()
        {
        }
        public static new ApiKeyState Empty => new ApiKeyState();
    }
}
