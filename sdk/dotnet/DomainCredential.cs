// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mailgun
{
    /// <summary>
    /// Provides a Mailgun domain credential resource. This can be used to create and manage credential in domain of Mailgun.
    /// 
    /// &gt; **Note:** Please note that starting of v0.6.1 due to using new Mailgun Client API (v4), there is no possibility to retrieve previously created secrets via API. In order get it worked, it's recommended to mark `password` as ignored under `lifecycle` block. See below.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mailgun = Pulumi.Mailgun;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new Mailgun credential
    ///     var foobar = new Mailgun.DomainCredential("foobar", new()
    ///     {
    ///         Domain = "toto.com",
    ///         Login = "test",
    ///         Password = "supersecretpassword1234",
    ///         Region = "us",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Domain credential can be imported using `region:email` via `import` command. Region has to be chosen from `eu` or `us` (when no selection `us` is applied).
    /// 
    /// Password is always exported to `null`.
    /// 
    /// hcl
    /// 
    /// ```sh
    /// $ pulumi import mailgun:index/domainCredential:DomainCredential test us:test@domain.com
    /// ```
    /// </summary>
    [MailgunResourceType("mailgun:index/domainCredential:DomainCredential")]
    public partial class DomainCredential : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The domain to add credential of Mailgun.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// The local-part of the email address to create.
        /// </summary>
        [Output("login")]
        public Output<string> Login { get; private set; } = null!;

        /// <summary>
        /// Password for user authentication.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// The region where domain will be created. Default value is `us`.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;


        /// <summary>
        /// Create a DomainCredential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainCredential(string name, DomainCredentialArgs args, CustomResourceOptions? options = null)
            : base("mailgun:index/domainCredential:DomainCredential", name, args ?? new DomainCredentialArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainCredential(string name, Input<string> id, DomainCredentialState? state = null, CustomResourceOptions? options = null)
            : base("mailgun:index/domainCredential:DomainCredential", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainCredential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainCredential Get(string name, Input<string> id, DomainCredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainCredential(name, id, state, options);
        }
    }

    public sealed class DomainCredentialArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The domain to add credential of Mailgun.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// The local-part of the email address to create.
        /// </summary>
        [Input("login", required: true)]
        public Input<string> Login { get; set; } = null!;

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// Password for user authentication.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The region where domain will be created. Default value is `us`.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public DomainCredentialArgs()
        {
        }
        public static new DomainCredentialArgs Empty => new DomainCredentialArgs();
    }

    public sealed class DomainCredentialState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The domain to add credential of Mailgun.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The local-part of the email address to create.
        /// </summary>
        [Input("login")]
        public Input<string>? Login { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password for user authentication.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The region where domain will be created. Default value is `us`.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public DomainCredentialState()
        {
        }
        public static new DomainCredentialState Empty => new DomainCredentialState();
    }
}
