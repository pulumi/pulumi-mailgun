{
    "name": "mailgun",
    "description": "A Pulumi package for creating and managing Mailgun resources.",
    "keywords": [
        "pulumi",
        "mailgun"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`mailgun` Terraform Provider](https://github.com/wgebis/terraform-provider-mailgun).",
    "repository": "https://github.com/pulumi/pulumi-mailgun",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "mailgun": "Mailgun"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-mailgun/sdk/v3/go/mailgun",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing Mailgun resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/wgebis/terraform-provider-mailgun)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-mailgun` repo](https://github.com/pulumi/pulumi-mailgun/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-mailgun` repo](https://github.com/wgebis/terraform-provider-mailgun/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/wgebis/terraform-provider-mailgun)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-mailgun` repo](https://github.com/pulumi/pulumi-mailgun/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-mailgun` repo](https://github.com/wgebis/terraform-provider-mailgun/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string"
            }
        },
        "defaults": [
            "apiKey"
        ]
    },
    "types": {
        "mailgun:index/DomainReceivingRecord:DomainReceivingRecord": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority of the record.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The record type.\n"
                },
                "valid": {
                    "type": "string",
                    "description": "`\"valid\"` if the record is valid.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the record.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "priority",
                        "recordType",
                        "valid",
                        "value"
                    ]
                }
            }
        },
        "mailgun:index/DomainReceivingRecordsSet:DomainReceivingRecordsSet": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority of the record.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The record type.\n"
                },
                "valid": {
                    "type": "string",
                    "description": "`\"valid\"` if the record is valid.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the record.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "priority",
                        "recordType",
                        "valid",
                        "value"
                    ]
                }
            }
        },
        "mailgun:index/DomainSendingRecord:DomainSendingRecord": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The domain to add to Mailgun\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The record type.\n"
                },
                "valid": {
                    "type": "string",
                    "description": "`\"valid\"` if the record is valid.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the record.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "recordType",
                        "valid",
                        "value"
                    ]
                }
            }
        },
        "mailgun:index/DomainSendingRecordsSet:DomainSendingRecordsSet": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The domain to add to Mailgun\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The record type.\n"
                },
                "valid": {
                    "type": "string",
                    "description": "`\"valid\"` if the record is valid.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the record.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "recordType",
                        "valid",
                        "value"
                    ]
                }
            }
        },
        "mailgun:index/getDomainReceivingRecord:getDomainReceivingRecord": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority of the record.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The record type.\n"
                },
                "valid": {
                    "type": "string",
                    "description": "`\"valid\"` if the record is valid.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the record.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "priority",
                "recordType",
                "valid",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mailgun:index/getDomainReceivingRecordsSet:getDomainReceivingRecordsSet": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority of the record.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The record type.\n"
                },
                "valid": {
                    "type": "string",
                    "description": "`\"valid\"` if the record is valid.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the record.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "priority",
                "recordType",
                "valid",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mailgun:index/getDomainSendingRecord:getDomainSendingRecord": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the domain.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The record type.\n"
                },
                "valid": {
                    "type": "string",
                    "description": "`\"valid\"` if the record is valid.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the record.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "recordType",
                "valid",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mailgun:index/getDomainSendingRecordsSet:getDomainSendingRecordsSet": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the domain.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The record type.\n"
                },
                "valid": {
                    "type": "string",
                    "description": "`\"valid\"` if the record is valid.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the record.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "recordType",
                "valid",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the mailgun package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiKey": {
                "type": "string"
            }
        },
        "required": [
            "apiKey"
        ],
        "inputProperties": {
            "apiKey": {
                "type": "string"
            }
        },
        "requiredInputs": [
            "apiKey"
        ]
    },
    "resources": {
        "mailgun:index/domain:Domain": {
            "description": "Provides a Mailgun App resource. This can be used to\ncreate and manage applications on Mailgun.\n\nAfter DNS records are set, domain verification should be triggered manually using [PUT /domains/\\\u003cdomain\\\u003e/verify](https://documentation.mailgun.com/en/latest/api-domains.html#domains)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mailgun from \"@pulumi/mailgun\";\n\n// Create a new Mailgun domain\nconst _default = new mailgun.Domain(\"default\", {\n    dkimKeySize: 1024,\n    region: \"us\",\n    smtpPassword: \"supersecretpassword1234\",\n    spamAction: \"disabled\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mailgun as mailgun\n\n# Create a new Mailgun domain\ndefault = mailgun.Domain(\"default\",\n    dkim_key_size=1024,\n    region=\"us\",\n    smtp_password=\"supersecretpassword1234\",\n    spam_action=\"disabled\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mailgun = Pulumi.Mailgun;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new Mailgun domain\n    var @default = new Mailgun.Domain(\"default\", new()\n    {\n        DkimKeySize = 1024,\n        Region = \"us\",\n        SmtpPassword = \"supersecretpassword1234\",\n        SpamAction = \"disabled\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mailgun/sdk/v3/go/mailgun\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mailgun.NewDomain(ctx, \"default\", \u0026mailgun.DomainArgs{\n\t\t\tDkimKeySize:  pulumi.Int(1024),\n\t\t\tRegion:       pulumi.String(\"us\"),\n\t\t\tSmtpPassword: pulumi.String(\"supersecretpassword1234\"),\n\t\t\tSpamAction:   pulumi.String(\"disabled\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mailgun.Domain;\nimport com.pulumi.mailgun.DomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new Domain(\"default\", DomainArgs.builder()        \n            .dkimKeySize(1024)\n            .region(\"us\")\n            .smtpPassword(\"supersecretpassword1234\")\n            .spamAction(\"disabled\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new Mailgun domain\n  default:\n    type: mailgun:Domain\n    properties:\n      dkimKeySize: 1024\n      region: us\n      smtpPassword: supersecretpassword1234\n      spamAction: disabled\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDomains can be imported using `region:domain_name` via `import` command. Region has to be chosen from `eu` or `us` (when no selection `us` is applied).\n\n hcl\n\n ```sh\n $ pulumi import mailgun:index/domain:Domain test us:example.domain.com\n```\n\n ",
            "properties": {
                "dkimKeySize": {
                    "type": "integer",
                    "description": "The length of your domain’s generated DKIM key. Default value is `1024`.\n"
                },
                "dkimSelector": {
                    "type": "string",
                    "description": "The name of your DKIM selector if you want to specify it whereas MailGun will make it's own choice.\n"
                },
                "forceDkimAuthority": {
                    "type": "boolean",
                    "description": "If set to true, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account. If set to false, the domain will have the same DKIM authority as the root domain registered on the same mailgun account. The default is `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The domain to add to Mailgun\n"
                },
                "openTracking": {
                    "type": "boolean",
                    "description": "(Enum: `yes` or `no`) The open tracking settings for the domain. Default: `no`\n"
                },
                "receivingRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mailgun:index/DomainReceivingRecord:DomainReceivingRecord"
                    },
                    "description": "A list of DNS records for receiving validation.  **Deprecated** Use `receiving_records_set` instead.\n",
                    "deprecationMessage": "Use `receiving_records_set` instead."
                },
                "receivingRecordsSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mailgun:index/DomainReceivingRecordsSet:DomainReceivingRecordsSet"
                    },
                    "description": "A set of DNS records for receiving validation.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where domain will be created. Default value is `us`.\n"
                },
                "sendingRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mailgun:index/DomainSendingRecord:DomainSendingRecord"
                    },
                    "description": "A list of DNS records for sending validation. **Deprecated** Use `sending_records_set` instead.\n",
                    "deprecationMessage": "Use `sending_records_set` instead."
                },
                "sendingRecordsSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mailgun:index/DomainSendingRecordsSet:DomainSendingRecordsSet"
                    },
                    "description": "A set of DNS records for sending validation.\n"
                },
                "smtpLogin": {
                    "type": "string",
                    "description": "The login email for the SMTP server.\n"
                },
                "smtpPassword": {
                    "type": "string",
                    "description": "Password for SMTP authentication\n",
                    "secret": true
                },
                "spamAction": {
                    "type": "string",
                    "description": "`disabled` or `tag` Disable, no spam\nfiltering will occur for inbound messages. Tag, messages\nwill be tagged with a spam header. Default value is `disabled`.\n"
                },
                "wildcard": {
                    "type": "boolean",
                    "description": "Boolean that determines whether\nthe domain will accept email for sub-domains.\n"
                }
            },
            "required": [
                "name",
                "receivingRecords",
                "receivingRecordsSets",
                "sendingRecords",
                "sendingRecordsSets",
                "smtpLogin"
            ],
            "inputProperties": {
                "dkimKeySize": {
                    "type": "integer",
                    "description": "The length of your domain’s generated DKIM key. Default value is `1024`.\n",
                    "willReplaceOnChanges": true
                },
                "dkimSelector": {
                    "type": "string",
                    "description": "The name of your DKIM selector if you want to specify it whereas MailGun will make it's own choice.\n",
                    "willReplaceOnChanges": true
                },
                "forceDkimAuthority": {
                    "type": "boolean",
                    "description": "If set to true, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account. If set to false, the domain will have the same DKIM authority as the root domain registered on the same mailgun account. The default is `false`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The domain to add to Mailgun\n",
                    "willReplaceOnChanges": true
                },
                "openTracking": {
                    "type": "boolean",
                    "description": "(Enum: `yes` or `no`) The open tracking settings for the domain. Default: `no`\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where domain will be created. Default value is `us`.\n",
                    "willReplaceOnChanges": true
                },
                "smtpPassword": {
                    "type": "string",
                    "description": "Password for SMTP authentication\n",
                    "secret": true
                },
                "spamAction": {
                    "type": "string",
                    "description": "`disabled` or `tag` Disable, no spam\nfiltering will occur for inbound messages. Tag, messages\nwill be tagged with a spam header. Default value is `disabled`.\n",
                    "willReplaceOnChanges": true
                },
                "wildcard": {
                    "type": "boolean",
                    "description": "Boolean that determines whether\nthe domain will accept email for sub-domains.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Domain resources.\n",
                "properties": {
                    "dkimKeySize": {
                        "type": "integer",
                        "description": "The length of your domain’s generated DKIM key. Default value is `1024`.\n",
                        "willReplaceOnChanges": true
                    },
                    "dkimSelector": {
                        "type": "string",
                        "description": "The name of your DKIM selector if you want to specify it whereas MailGun will make it's own choice.\n",
                        "willReplaceOnChanges": true
                    },
                    "forceDkimAuthority": {
                        "type": "boolean",
                        "description": "If set to true, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account. If set to false, the domain will have the same DKIM authority as the root domain registered on the same mailgun account. The default is `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The domain to add to Mailgun\n",
                        "willReplaceOnChanges": true
                    },
                    "openTracking": {
                        "type": "boolean",
                        "description": "(Enum: `yes` or `no`) The open tracking settings for the domain. Default: `no`\n"
                    },
                    "receivingRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mailgun:index/DomainReceivingRecord:DomainReceivingRecord"
                        },
                        "description": "A list of DNS records for receiving validation.  **Deprecated** Use `receiving_records_set` instead.\n",
                        "deprecationMessage": "Use `receiving_records_set` instead."
                    },
                    "receivingRecordsSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mailgun:index/DomainReceivingRecordsSet:DomainReceivingRecordsSet"
                        },
                        "description": "A set of DNS records for receiving validation.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where domain will be created. Default value is `us`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sendingRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mailgun:index/DomainSendingRecord:DomainSendingRecord"
                        },
                        "description": "A list of DNS records for sending validation. **Deprecated** Use `sending_records_set` instead.\n",
                        "deprecationMessage": "Use `sending_records_set` instead."
                    },
                    "sendingRecordsSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mailgun:index/DomainSendingRecordsSet:DomainSendingRecordsSet"
                        },
                        "description": "A set of DNS records for sending validation.\n"
                    },
                    "smtpLogin": {
                        "type": "string",
                        "description": "The login email for the SMTP server.\n"
                    },
                    "smtpPassword": {
                        "type": "string",
                        "description": "Password for SMTP authentication\n",
                        "secret": true
                    },
                    "spamAction": {
                        "type": "string",
                        "description": "`disabled` or `tag` Disable, no spam\nfiltering will occur for inbound messages. Tag, messages\nwill be tagged with a spam header. Default value is `disabled`.\n",
                        "willReplaceOnChanges": true
                    },
                    "wildcard": {
                        "type": "boolean",
                        "description": "Boolean that determines whether\nthe domain will accept email for sub-domains.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "mailgun:index/domainCredential:DomainCredential": {
            "description": "Provides a Mailgun domain credential resource. This can be used to create and manage credential in domain of Mailgun.\n\n\u003e **Note:** Please note that starting of v0.6.1 due to using new Mailgun Client API (v4), there is no possibility to retrieve previously created secrets via API. In order get it worked, it's recommended to mark `password` as ignored under `lifecycle` block. See below.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mailgun.DomainCredential;\nimport com.pulumi.mailgun.DomainCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DomainCredential(\"foobar\", DomainCredentialArgs.builder()        \n            .domain(\"toto.com\")\n            .lifecycle(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .login(\"test\")\n            .password(\"supersecretpassword1234\")\n            .region(\"us\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new Mailgun credential\n  foobar:\n    type: mailgun:DomainCredential\n    properties:\n      domain: toto.com\n      lifecycle:\n        ignoreChanges:\n          - password\n      login: test\n      password: supersecretpassword1234\n      region: us\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDomain credential can be imported using `region:email` via `import` command. Region has to be chosen from `eu` or `us` (when no selection `us` is applied).\n\n Password is always exported to `null`.\n\n hcl\n\n ```sh\n $ pulumi import mailgun:index/domainCredential:DomainCredential test us:test@domain.com\n```\n\n ",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain to add credential of Mailgun.\n"
                },
                "login": {
                    "type": "string",
                    "description": "The local-part of the email address to create.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for user authentication.\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "The region where domain will be created. Default value is `us`.\n"
                }
            },
            "required": [
                "domain",
                "login",
                "password"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The domain to add credential of Mailgun.\n",
                    "willReplaceOnChanges": true
                },
                "login": {
                    "type": "string",
                    "description": "The local-part of the email address to create.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "Password for user authentication.\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "The region where domain will be created. Default value is `us`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domain",
                "login",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainCredential resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The domain to add credential of Mailgun.\n",
                        "willReplaceOnChanges": true
                    },
                    "login": {
                        "type": "string",
                        "description": "The local-part of the email address to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for user authentication.\n",
                        "secret": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where domain will be created. Default value is `us`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "mailgun:index/route:Route": {
            "description": "Provides a Mailgun Route resource. This can be used to create and manage routes on Mailgun.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mailgun from \"@pulumi/mailgun\";\n\n// Create a new Mailgun route\nconst _default = new mailgun.Route(\"default\", {\n    actions: [\n        \"forward('http://example.com/api/v1/foos/')\",\n        \"stop()\",\n    ],\n    description: \"inbound\",\n    expression: \"match_recipient('.*@foo.example.com')\",\n    priority: 0,\n});\n```\n```python\nimport pulumi\nimport pulumi_mailgun as mailgun\n\n# Create a new Mailgun route\ndefault = mailgun.Route(\"default\",\n    actions=[\n        \"forward('http://example.com/api/v1/foos/')\",\n        \"stop()\",\n    ],\n    description=\"inbound\",\n    expression=\"match_recipient('.*@foo.example.com')\",\n    priority=0)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mailgun = Pulumi.Mailgun;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new Mailgun route\n    var @default = new Mailgun.Route(\"default\", new()\n    {\n        Actions = new[]\n        {\n            \"forward('http://example.com/api/v1/foos/')\",\n            \"stop()\",\n        },\n        Description = \"inbound\",\n        Expression = \"match_recipient('.*@foo.example.com')\",\n        Priority = 0,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mailgun/sdk/v3/go/mailgun\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mailgun.NewRoute(ctx, \"default\", \u0026mailgun.RouteArgs{\n\t\t\tActions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"forward('http://example.com/api/v1/foos/')\"),\n\t\t\t\tpulumi.String(\"stop()\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"inbound\"),\n\t\t\tExpression:  pulumi.String(\"match_recipient('.*@foo.example.com')\"),\n\t\t\tPriority:    pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mailgun.Route;\nimport com.pulumi.mailgun.RouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new Route(\"default\", RouteArgs.builder()        \n            .actions(            \n                \"forward('http://example.com/api/v1/foos/')\",\n                \"stop()\")\n            .description(\"inbound\")\n            .expression(\"match_recipient('.*@foo.example.com')\")\n            .priority(\"0\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new Mailgun route\n  default:\n    type: mailgun:Route\n    properties:\n      actions:\n        - forward('http://example.com/api/v1/foos/')\n        - stop()\n      description: inbound\n      expression: match_recipient('.*@foo.example.com')\n      priority: '0'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRoutes can be imported using `ROUTE_ID` and `region` via `import` command. Route ID can be found on Mailgun portal in section `Receiving/Routes`. Region has to be chosen from `eu` or `us` (when no selection `us` is applied).\n\n hcl\n\n ```sh\n $ pulumi import mailgun:index/route:Route test eu:123456789\n```\n\n ",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "expression": {
                    "type": "string",
                    "description": "A filter expression like `match_recipient('.*@gmail.com')`\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Smaller number indicates higher priority. Higher priority routes are handled first.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where domain will be created. Default value is `us`.\n"
                }
            },
            "required": [
                "actions",
                "expression",
                "priority"
            ],
            "inputProperties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "expression": {
                    "type": "string",
                    "description": "A filter expression like `match_recipient('.*@gmail.com')`\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Smaller number indicates higher priority. Higher priority routes are handled first.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where domain will be created. Default value is `us`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "actions",
                "expression",
                "priority"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Route resources.\n",
                "properties": {
                    "actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "expression": {
                        "type": "string",
                        "description": "A filter expression like `match_recipient('.*@gmail.com')`\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Smaller number indicates higher priority. Higher priority routes are handled first.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where domain will be created. Default value is `us`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "mailgun:index/webhook:Webhook": {
            "description": "Provides a Mailgun App resource. This can be used to\ncreate and manage applications on Mailgun.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mailgun from \"@pulumi/mailgun\";\n\n// Create a new Mailgun webhook\nconst _default = new mailgun.Webhook(\"default\", {\n    domain: \"test.example.com\",\n    kind: \"delivered\",\n    region: \"us\",\n    urls: [\"https://example.com\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_mailgun as mailgun\n\n# Create a new Mailgun webhook\ndefault = mailgun.Webhook(\"default\",\n    domain=\"test.example.com\",\n    kind=\"delivered\",\n    region=\"us\",\n    urls=[\"https://example.com\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mailgun = Pulumi.Mailgun;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new Mailgun webhook\n    var @default = new Mailgun.Webhook(\"default\", new()\n    {\n        Domain = \"test.example.com\",\n        Kind = \"delivered\",\n        Region = \"us\",\n        Urls = new[]\n        {\n            \"https://example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mailgun/sdk/v3/go/mailgun\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mailgun.NewWebhook(ctx, \"default\", \u0026mailgun.WebhookArgs{\n\t\t\tDomain: pulumi.String(\"test.example.com\"),\n\t\t\tKind:   pulumi.String(\"delivered\"),\n\t\t\tRegion: pulumi.String(\"us\"),\n\t\t\tUrls: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mailgun.Webhook;\nimport com.pulumi.mailgun.WebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new Webhook(\"default\", WebhookArgs.builder()        \n            .domain(\"test.example.com\")\n            .kind(\"delivered\")\n            .region(\"us\")\n            .urls(\"https://example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new Mailgun webhook\n  default:\n    type: mailgun:Webhook\n    properties:\n      domain: test.example.com\n      kind: delivered\n      region: us\n      urls:\n        - https://example.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain to add to Mailgun\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of webhook. Supported values (`clicked` `complained` `delivered` `opened` `permanent_fail`, `temporary_fail` `unsubscribed`)\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where domain will be created. Default value is `us`.\n"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The urls of webhook\n"
                }
            },
            "required": [
                "domain",
                "kind",
                "urls"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The domain to add to Mailgun\n",
                    "willReplaceOnChanges": true
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of webhook. Supported values (`clicked` `complained` `delivered` `opened` `permanent_fail`, `temporary_fail` `unsubscribed`)\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region where domain will be created. Default value is `us`.\n",
                    "willReplaceOnChanges": true
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The urls of webhook\n"
                }
            },
            "requiredInputs": [
                "domain",
                "kind",
                "urls"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhook resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The domain to add to Mailgun\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of webhook. Supported values (`clicked` `complained` `delivered` `opened` `permanent_fail`, `temporary_fail` `unsubscribed`)\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where domain will be created. Default value is `us`.\n",
                        "willReplaceOnChanges": true
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The urls of webhook\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "mailgun:index/getDomain:getDomain": {
            "description": "`mailgun.Domain` provides details about a Mailgun domain.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as mailgun from \"@pulumi/mailgun\";\n\nconst domain = mailgun.getDomain({\n    name: \"test.example.com\",\n});\nconst mailgun_mx = new aws.route53.Record(\"mailgun-mx\", {\n    name: data.mailgun.domain.name,\n    records: [\n        Promise.all([domain, domain]).then(([domain, domain1]) =\u003e `${domain.receivingRecords?.[0]?.priority} ${domain1.receivingRecords?.[0]?.value}.`),\n        Promise.all([domain, domain]).then(([domain, domain1]) =\u003e `${domain.receivingRecords?.[1]?.priority} ${domain1.receivingRecords?.[1]?.value}.`),\n    ],\n    ttl: 3600,\n    type: \"MX\",\n    zoneId: _var.zone_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_mailgun as mailgun\n\ndomain = mailgun.get_domain(name=\"test.example.com\")\nmailgun_mx = aws.route53.Record(\"mailgun-mx\",\n    name=data[\"mailgun\"][\"domain\"][\"name\"],\n    records=[\n        f\"{domain.receiving_records[0].priority} {domain.receiving_records[0].value}.\",\n        f\"{domain.receiving_records[1].priority} {domain.receiving_records[1].value}.\",\n    ],\n    ttl=3600,\n    type=\"MX\",\n    zone_id=var[\"zone_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Mailgun = Pulumi.Mailgun;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var domain = Mailgun.GetDomain.Invoke(new()\n    {\n        Name = \"test.example.com\",\n    });\n\n    var mailgun_mx = new Aws.Route53.Record(\"mailgun-mx\", new()\n    {\n        Name = data.Mailgun.Domain.Name,\n        Records = new[]\n        {\n            Output.Tuple(domain, domain).Apply(values =\u003e\n            {\n                var domain = values.Item1;\n                var domain1 = values.Item2;\n                return $\"{domain.Apply(getDomainResult =\u003e getDomainResult.ReceivingRecords[0]?.Priority)} {domain1.ReceivingRecords[0]?.Value}.\";\n            }),\n            Output.Tuple(domain, domain).Apply(values =\u003e\n            {\n                var domain = values.Item1;\n                var domain1 = values.Item2;\n                return $\"{domain.Apply(getDomainResult =\u003e getDomainResult.ReceivingRecords[1]?.Priority)} {domain1.ReceivingRecords[1]?.Value}.\";\n            }),\n        },\n        Ttl = 3600,\n        Type = \"MX\",\n        ZoneId = @var.Zone_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/route53\"\n\t\"github.com/pulumi/pulumi-mailgun/sdk/v3/go/mailgun\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdomain, err := mailgun.LookupDomain(ctx, \u0026mailgun.LookupDomainArgs{\n\t\t\tName: \"test.example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = route53.NewRecord(ctx, \"mailgun-mx\", \u0026route53.RecordArgs{\n\t\t\tName: pulumi.Any(data.Mailgun.Domain.Name),\n\t\t\tRecords: pulumi.StringArray{\n\t\t\t\tpulumi.String(fmt.Sprintf(\"%v %v.\", domain.ReceivingRecords[0].Priority, domain.ReceivingRecords[0].Value)),\n\t\t\t\tpulumi.String(fmt.Sprintf(\"%v %v.\", domain.ReceivingRecords[1].Priority, domain.ReceivingRecords[1].Value)),\n\t\t\t},\n\t\t\tTtl:    pulumi.Int(3600),\n\t\t\tType:   pulumi.String(\"MX\"),\n\t\t\tZoneId: pulumi.Any(_var.Zone_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mailgun.MailgunFunctions;\nimport com.pulumi.mailgun.inputs.GetDomainArgs;\nimport com.pulumi.aws.route53.Record;\nimport com.pulumi.aws.route53.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var domain = MailgunFunctions.getDomain(GetDomainArgs.builder()\n            .name(\"test.example.com\")\n            .build());\n\n        var mailgun_mx = new Record(\"mailgun-mx\", RecordArgs.builder()        \n            .name(data.mailgun().domain().name())\n            .records(            \n                String.format(\"%s %s.\", domain.applyValue(getDomainResult -\u003e getDomainResult.receivingRecords()[0].priority()),domain.applyValue(getDomainResult -\u003e getDomainResult.receivingRecords()[0].value())),\n                String.format(\"%s %s.\", domain.applyValue(getDomainResult -\u003e getDomainResult.receivingRecords()[1].priority()),domain.applyValue(getDomainResult -\u003e getDomainResult.receivingRecords()[1].value())))\n            .ttl(3600)\n            .type(\"MX\")\n            .zoneId(var_.zone_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mailgun-mx:\n    type: aws:route53:Record\n    properties:\n      name: ${data.mailgun.domain.name}\n      records:\n        - ${domain.receivingRecords[0].priority} ${domain.receivingRecords[0].value}.\n        - ${domain.receivingRecords[1].priority} ${domain.receivingRecords[1].value}.\n      ttl: 3600\n      type: MX\n      zoneId: ${var.zone_id}\nvariables:\n  domain:\n    fn::invoke:\n      Function: mailgun:getDomain\n      Arguments:\n        name: test.example.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomain.\n",
                "properties": {
                    "dkimKeySize": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "dkimSelector": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "forceDkimAuthority": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "openTracking": {
                        "type": "boolean"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where domain will be created. Default value is `us`.\n",
                        "willReplaceOnChanges": true
                    },
                    "smtpPassword": {
                        "type": "string",
                        "description": "The password to the SMTP server.\n",
                        "secret": true
                    },
                    "spamAction": {
                        "type": "string",
                        "description": "The spam filtering setting.\n",
                        "willReplaceOnChanges": true
                    },
                    "wildcard": {
                        "type": "boolean",
                        "description": "Whether or not the domain will accept email for sub-domains.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDomain.\n",
                "properties": {
                    "dkimKeySize": {
                        "type": "integer"
                    },
                    "dkimSelector": {
                        "type": "string"
                    },
                    "forceDkimAuthority": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the record.\n"
                    },
                    "openTracking": {
                        "type": "boolean"
                    },
                    "receivingRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mailgun:index/getDomainReceivingRecord:getDomainReceivingRecord"
                        },
                        "description": "A list of DNS records for receiving validation.\n",
                        "deprecationMessage": "Use `receiving_records_set` instead."
                    },
                    "receivingRecordsSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mailgun:index/getDomainReceivingRecordsSet:getDomainReceivingRecordsSet"
                        }
                    },
                    "region": {
                        "type": "string"
                    },
                    "sendingRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mailgun:index/getDomainSendingRecord:getDomainSendingRecord"
                        },
                        "description": "A list of DNS records for sending validation.\n",
                        "deprecationMessage": "Use `sending_records_set` instead."
                    },
                    "sendingRecordsSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mailgun:index/getDomainSendingRecordsSet:getDomainSendingRecordsSet"
                        }
                    },
                    "smtpLogin": {
                        "type": "string",
                        "description": "The login email for the SMTP server.\n"
                    },
                    "smtpPassword": {
                        "type": "string",
                        "description": "The password to the SMTP server.\n",
                        "secret": true
                    },
                    "spamAction": {
                        "type": "string",
                        "description": "The spam filtering setting.\n"
                    },
                    "wildcard": {
                        "type": "boolean",
                        "description": "Whether or not the domain will accept email for sub-domains.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "receivingRecords",
                    "receivingRecordsSets",
                    "sendingRecords",
                    "sendingRecordsSets",
                    "smtpLogin",
                    "id"
                ]
            }
        }
    }
}